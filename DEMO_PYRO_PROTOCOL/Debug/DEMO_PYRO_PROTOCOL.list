
DEMO_PYRO_PROTOCOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001180  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001240  08001240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800125c  0800125c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001264  08001264  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001264  08001264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001268  08001268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800126c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000028  08001294  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08001294  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003435  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000107e  00000000  00000000  00023485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000350  00000000  00000000  00024508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000450  00000000  00000000  00024858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f3f4  00000000  00000000  00024ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a0e  00000000  00000000  0003409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c23f  00000000  00000000  00039aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00095ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000760  00000000  00000000  00095d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000146c  00000000  00000000  0009649c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001228 	.word	0x08001228

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08001228 	.word	0x08001228

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004a8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	2404      	movs	r4, #4
{
 80004ac:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	2214      	movs	r2, #20
 80004b0:	2100      	movs	r1, #0
 80004b2:	a801      	add	r0, sp, #4
 80004b4:	f000 feb0 	bl	8001218 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_GPIO_Init+0x44>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, GPIO_PIN_RESET);
 80004ba:	4d0d      	ldr	r5, [pc, #52]	; (80004f0 <MX_GPIO_Init+0x48>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, GPIO_PIN_RESET);
 80004be:	0028      	movs	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c0:	4322      	orrs	r2, r4
 80004c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c8:	4023      	ands	r3, r4
 80004ca:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, GPIO_PIN_RESET);
 80004cc:	2104      	movs	r1, #4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, GPIO_PIN_RESET);
 80004d0:	f000 fa8e 	bl	80009f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PC2_GPIO_Port, &GPIO_InitStruct);
 80004da:	0028      	movs	r0, r5
 80004dc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = PC2_Pin;
 80004de:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(PC2_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f000 f972 	bl	80007cc <HAL_GPIO_Init>

}
 80004e8:	b007      	add	sp, #28
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	40021000 	.word	0x40021000
 80004f0:	50000800 	.word	0x50000800

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b510      	push	{r4, lr}
 80004f6:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f8:	2230      	movs	r2, #48	; 0x30
 80004fa:	2100      	movs	r1, #0
 80004fc:	a806      	add	r0, sp, #24
 80004fe:	f000 fe8b 	bl	8001218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	2214      	movs	r2, #20
 8000504:	2100      	movs	r1, #0
 8000506:	4668      	mov	r0, sp
 8000508:	f000 fe86 	bl	8001218 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050c:	4913      	ldr	r1, [pc, #76]	; (800055c <SystemClock_Config+0x68>)
 800050e:	4a14      	ldr	r2, [pc, #80]	; (8000560 <SystemClock_Config+0x6c>)
 8000510:	680b      	ldr	r3, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	401a      	ands	r2, r3
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	4313      	orrs	r3, r2
 800051c:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051e:	2302      	movs	r3, #2
 8000520:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	330e      	adds	r3, #14
 8000524:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000526:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	f000 faab 	bl	8000a88 <HAL_RCC_OscConfig>
 8000532:	2800      	cmp	r0, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000536:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000538:	e7fe      	b.n	8000538 <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000542:	3381      	adds	r3, #129	; 0x81
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000544:	2100      	movs	r1, #0
 8000546:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000548:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800054a:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054c:	f000 fd52 	bl	8000ff4 <HAL_RCC_ClockConfig>
 8000550:	2800      	cmp	r0, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x64>
 8000554:	b672      	cpsid	i
	while (1)
 8000556:	e7fe      	b.n	8000556 <SystemClock_Config+0x62>
}
 8000558:	b012      	add	sp, #72	; 0x48
 800055a:	bd10      	pop	{r4, pc}
 800055c:	40007000 	.word	0x40007000
 8000560:	ffffe7ff 	.word	0xffffe7ff

08000564 <main>:
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	b083      	sub	sp, #12
	volatile uint8_t vu8TshdCount=THSD_REPEAT;
 8000568:	466b      	mov	r3, sp
 800056a:	1ddc      	adds	r4, r3, #7
 800056c:	230f      	movs	r3, #15
 800056e:	7023      	strb	r3, [r4, #0]
  HAL_Init();
 8000570:	f000 f8ba 	bl	80006e8 <HAL_Init>
  SystemClock_Config();
 8000574:	f7ff ffbe 	bl	80004f4 <SystemClock_Config>
  MX_GPIO_Init();
 8000578:	f7ff ff96 	bl	80004a8 <MX_GPIO_Init>
		PYRO_SERIN_PIN_HIGH();
 800057c:	2304      	movs	r3, #4
 800057e:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <main+0x74>)
	PYRO_SERIN_PIN_LOW();
 8000580:	2080      	movs	r0, #128	; 0x80
 8000582:	0017      	movs	r7, r2
		PYRO_SERIN_PIN_HIGH();
 8000584:	469c      	mov	ip, r3
 8000586:	2604      	movs	r6, #4
		vu8TshdCount=THSD_REPEAT;
 8000588:	250f      	movs	r5, #15
	PYRO_SERIN_PIN_LOW();
 800058a:	4914      	ldr	r1, [pc, #80]	; (80005dc <main+0x78>)
 800058c:	02c0      	lsls	r0, r0, #11
 800058e:	6188      	str	r0, [r1, #24]
	while(u8CommandSerInCount < CMD_SERIN_SIZE)
 8000590:	3719      	adds	r7, #25
		PYRO_SERIN_PIN_HIGH();
 8000592:	618e      	str	r6, [r1, #24]
		TSH();
 8000594:	46c0      	nop			; (mov r8, r8)
		if(SerInBuffer[u8CommandSerInCount])
 8000596:	7813      	ldrb	r3, [r2, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d01a      	beq.n	80005d2 <main+0x6e>
			PYRO_SERIN_PIN_HIGH(); // bit 1
 800059c:	4663      	mov	r3, ip
 800059e:	618b      	str	r3, [r1, #24]
 80005a0:	e00d      	b.n	80005be <main+0x5a>
			TSHD();
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46c0      	nop			; (mov r8, r8)
			vu8TshdCount--;
 80005b6:	7823      	ldrb	r3, [r4, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	7023      	strb	r3, [r4, #0]
		while (vu8TshdCount)
 80005be:	7823      	ldrb	r3, [r4, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1ee      	bne.n	80005a2 <main+0x3e>
		vu8TshdCount=THSD_REPEAT;
 80005c4:	7025      	strb	r5, [r4, #0]
		PYRO_SERIN_PIN_LOW();
 80005c6:	6188      	str	r0, [r1, #24]
		TSL();
 80005c8:	46c0      	nop			; (mov r8, r8)
	while(u8CommandSerInCount < CMD_SERIN_SIZE)
 80005ca:	3201      	adds	r2, #1
 80005cc:	42ba      	cmp	r2, r7
 80005ce:	d1e0      	bne.n	8000592 <main+0x2e>
	while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x6c>
			PYRO_SERIN_PIN_LOW(); // bit 0
 80005d2:	6188      	str	r0, [r1, #24]
		while (vu8TshdCount)
 80005d4:	e7f3      	b.n	80005be <main+0x5a>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	20000000 	.word	0x20000000
 80005dc:	50000800 	.word	0x50000800

080005e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e0:	2101      	movs	r1, #1
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_MspInit+0x18>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80005ee:	0552      	lsls	r2, r2, #21
 80005f0:	430a      	orrs	r2, r1
 80005f2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000

080005fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler>
 80005fe:	46c0      	nop			; (mov r8, r8)

08000600 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <HardFault_Handler>
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <PendSV_Handler>:
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060e:	f000 f87f 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000612:	bd10      	pop	{r4, pc}

08000614 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000618:	4813      	ldr	r0, [pc, #76]	; (8000668 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <LoopForever+0x6>)
    LDR R1, [R0]
 800061e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000620:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <LoopForever+0xa>)
    CMP R1, R2
 8000624:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000626:	d105      	bne.n	8000634 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800062a:	4913      	ldr	r1, [pc, #76]	; (8000678 <LoopForever+0x12>)
    STR R1, [R0]
 800062c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800062e:	4813      	ldr	r0, [pc, #76]	; (800067c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000630:	4913      	ldr	r1, [pc, #76]	; (8000680 <LoopForever+0x1a>)
    STR R1, [R0]
 8000632:	6001      	str	r1, [r0, #0]

08000634 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	4813      	ldr	r0, [pc, #76]	; (8000684 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000636:	4914      	ldr	r1, [pc, #80]	; (8000688 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <LoopForever+0x26>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800064c:	4c11      	ldr	r4, [pc, #68]	; (8000694 <LoopForever+0x2e>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800065a:	f7ff ffdb 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f000 fdb7 	bl	80011d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000662:	f7ff ff7f 	bl	8000564 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
   ldr   r0, =_estack
 8000668:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 800066c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000670:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000674:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000678:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800067c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000680:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800068c:	0800126c 	.word	0x0800126c
  ldr r2, =_sbss
 8000690:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000694:	20000048 	.word	0x20000048

08000698 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_IRQHandler>
	...

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b510      	push	{r4, lr}
 800069e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a0:	20fa      	movs	r0, #250	; 0xfa
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_InitTick+0x40>)
 80006a4:	0080      	lsls	r0, r0, #2
 80006a6:	7819      	ldrb	r1, [r3, #0]
 80006a8:	f7ff fd2e 	bl	8000108 <__udivsi3>
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_InitTick+0x44>)
 80006ae:	0001      	movs	r1, r0
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	f7ff fd29 	bl	8000108 <__udivsi3>
 80006b6:	f000 f86f 	bl	8000798 <HAL_SYSTICK_Config>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d10c      	bne.n	80006d8 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80006be:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c0:	2c03      	cmp	r4, #3
 80006c2:	d900      	bls.n	80006c6 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006c4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c6:	3802      	subs	r0, #2
 80006c8:	2200      	movs	r2, #0
 80006ca:	0021      	movs	r1, r4
 80006cc:	f000 f832 	bl	8000734 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_InitTick+0x48>)
 80006d2:	2000      	movs	r0, #0
 80006d4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80006d6:	e7f5      	b.n	80006c4 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
 80006da:	e7f3      	b.n	80006c4 <HAL_InitTick+0x28>
 80006dc:	20000020 	.word	0x20000020
 80006e0:	2000001c 	.word	0x2000001c
 80006e4:	20000024 	.word	0x20000024

080006e8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_Init+0x24>)
{
 80006ec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006ee:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f0:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006f2:	430b      	orrs	r3, r1
 80006f4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f6:	f7ff ffd1 	bl	800069c <HAL_InitTick>
 80006fa:	1e04      	subs	r4, r0, #0
 80006fc:	d002      	beq.n	8000704 <HAL_Init+0x1c>
    status = HAL_ERROR;
 80006fe:	2401      	movs	r4, #1
}
 8000700:	0020      	movs	r0, r4
 8000702:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000704:	f7ff ff6c 	bl	80005e0 <HAL_MspInit>
 8000708:	e7fa      	b.n	8000700 <HAL_Init+0x18>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <HAL_IncTick+0x10>)
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <HAL_IncTick+0x14>)
 8000714:	6811      	ldr	r1, [r2, #0]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	185b      	adds	r3, r3, r1
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	4770      	bx	lr
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000044 	.word	0x20000044
 8000724:	20000020 	.word	0x20000020

08000728 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000728:	4b01      	ldr	r3, [pc, #4]	; (8000730 <HAL_GetTick+0x8>)
 800072a:	6818      	ldr	r0, [r3, #0]
}
 800072c:	4770      	bx	lr
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000044 	.word	0x20000044

08000734 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000734:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000736:	2800      	cmp	r0, #0
 8000738:	db14      	blt.n	8000764 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_NVIC_SetPriority+0x5c>)
 800073c:	2203      	movs	r2, #3
 800073e:	469c      	mov	ip, r3
 8000740:	23ff      	movs	r3, #255	; 0xff
 8000742:	0884      	lsrs	r4, r0, #2
 8000744:	4010      	ands	r0, r2
 8000746:	001a      	movs	r2, r3
 8000748:	26c0      	movs	r6, #192	; 0xc0
 800074a:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800074c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074e:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000750:	400b      	ands	r3, r1
 8000752:	4083      	lsls	r3, r0
 8000754:	00a4      	lsls	r4, r4, #2
 8000756:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	00b6      	lsls	r6, r6, #2
 800075a:	59a5      	ldr	r5, [r4, r6]
 800075c:	4395      	bics	r5, r2
 800075e:	432b      	orrs	r3, r5
 8000760:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000762:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <HAL_NVIC_SetPriority+0x60>)
 8000766:	230f      	movs	r3, #15
 8000768:	4694      	mov	ip, r2
 800076a:	2203      	movs	r2, #3
 800076c:	4003      	ands	r3, r0
 800076e:	4010      	ands	r0, r2
 8000770:	32fc      	adds	r2, #252	; 0xfc
 8000772:	0015      	movs	r5, r2
 8000774:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000776:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000778:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800077a:	400a      	ands	r2, r1
 800077c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077e:	3b08      	subs	r3, #8
 8000780:	089b      	lsrs	r3, r3, #2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4463      	add	r3, ip
 8000786:	69dc      	ldr	r4, [r3, #28]
 8000788:	43ac      	bics	r4, r5
 800078a:	4322      	orrs	r2, r4
 800078c:	61da      	str	r2, [r3, #28]
 800078e:	e7e8      	b.n	8000762 <HAL_NVIC_SetPriority+0x2e>
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	1e43      	subs	r3, r0, #1
 800079c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d20e      	bcs.n	80007c2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ac:	6a03      	ldr	r3, [r0, #32]
 80007ae:	0609      	lsls	r1, r1, #24
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ba:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	3307      	adds	r3, #7
 80007c0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007c2:	4770      	bx	lr
 80007c4:	e000e010 	.word	0xe000e010
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <HAL_GPIO_Init>:
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80007cc:	680b      	ldr	r3, [r1, #0]
{
 80007ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d0:	46de      	mov	lr, fp
  while (((GPIO_Init->Pin) >> position) != 0)
 80007d2:	469b      	mov	fp, r3
{
 80007d4:	4657      	mov	r7, sl
 80007d6:	464e      	mov	r6, r9
 80007d8:	4645      	mov	r5, r8
 80007da:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0)
 80007dc:	4659      	mov	r1, fp
{
 80007de:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0)
 80007e0:	2200      	movs	r2, #0
  uint32_t position = 0x00U;
 80007e2:	2300      	movs	r3, #0
{
 80007e4:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d07d      	beq.n	80008e6 <HAL_GPIO_Init+0x11a>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007ea:	2601      	movs	r6, #1
 80007ec:	000c      	movs	r4, r1
 80007ee:	409e      	lsls	r6, r3
 80007f0:	4034      	ands	r4, r6
 80007f2:	46a3      	mov	fp, r4

    if (iocurrent)
 80007f4:	4231      	tst	r1, r6
 80007f6:	d070      	beq.n	80008da <HAL_GPIO_Init+0x10e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007f8:	4664      	mov	r4, ip
 80007fa:	2503      	movs	r5, #3
 80007fc:	6864      	ldr	r4, [r4, #4]
 80007fe:	4025      	ands	r5, r4
 8000800:	46a8      	mov	r8, r5
 8000802:	3d01      	subs	r5, #1
 8000804:	2d01      	cmp	r5, #1
 8000806:	d800      	bhi.n	800080a <HAL_GPIO_Init+0x3e>
 8000808:	e074      	b.n	80008f4 <HAL_GPIO_Init+0x128>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800080a:	4645      	mov	r5, r8
 800080c:	2d03      	cmp	r5, #3
 800080e:	d000      	beq.n	8000812 <HAL_GPIO_Init+0x46>
 8000810:	e0ba      	b.n	8000988 <HAL_GPIO_Init+0x1bc>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000812:	4646      	mov	r6, r8
 8000814:	4096      	lsls	r6, r2
 8000816:	43f5      	mvns	r5, r6
 8000818:	9501      	str	r5, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800081a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800081c:	9d01      	ldr	r5, [sp, #4]
 800081e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000820:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8000822:	6005      	str	r5, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000824:	25c0      	movs	r5, #192	; 0xc0
 8000826:	02ad      	lsls	r5, r5, #10
 8000828:	422c      	tst	r4, r5
 800082a:	d056      	beq.n	80008da <HAL_GPIO_Init+0x10e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	2701      	movs	r7, #1
 800082e:	4e68      	ldr	r6, [pc, #416]	; (80009d0 <HAL_GPIO_Init+0x204>)
 8000830:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8000832:	433d      	orrs	r5, r7
 8000834:	6375      	str	r5, [r6, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000836:	4e67      	ldr	r6, [pc, #412]	; (80009d4 <HAL_GPIO_Init+0x208>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000838:	3702      	adds	r7, #2
 800083a:	46b0      	mov	r8, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800083c:	089d      	lsrs	r5, r3, #2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800083e:	401f      	ands	r7, r3
 8000840:	00bf      	lsls	r7, r7, #2
 8000842:	00ad      	lsls	r5, r5, #2
 8000844:	4445      	add	r5, r8
 8000846:	46b8      	mov	r8, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000848:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800084a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800084c:	46b2      	mov	sl, r6
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800084e:	4646      	mov	r6, r8
 8000850:	40b7      	lsls	r7, r6
 8000852:	003e      	movs	r6, r7
 8000854:	4657      	mov	r7, sl
 8000856:	43b7      	bics	r7, r6
 8000858:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800085a:	27a0      	movs	r7, #160	; 0xa0
 800085c:	05ff      	lsls	r7, r7, #23
 800085e:	42b8      	cmp	r0, r7
 8000860:	d01a      	beq.n	8000898 <HAL_GPIO_Init+0xcc>
 8000862:	4f5d      	ldr	r7, [pc, #372]	; (80009d8 <HAL_GPIO_Init+0x20c>)
 8000864:	42b8      	cmp	r0, r7
 8000866:	d100      	bne.n	800086a <HAL_GPIO_Init+0x9e>
 8000868:	e0a0      	b.n	80009ac <HAL_GPIO_Init+0x1e0>
 800086a:	4f5c      	ldr	r7, [pc, #368]	; (80009dc <HAL_GPIO_Init+0x210>)
 800086c:	42b8      	cmp	r0, r7
 800086e:	d100      	bne.n	8000872 <HAL_GPIO_Init+0xa6>
 8000870:	e0a4      	b.n	80009bc <HAL_GPIO_Init+0x1f0>
 8000872:	4f5b      	ldr	r7, [pc, #364]	; (80009e0 <HAL_GPIO_Init+0x214>)
 8000874:	2603      	movs	r6, #3
 8000876:	42b8      	cmp	r0, r7
 8000878:	d009      	beq.n	800088e <HAL_GPIO_Init+0xc2>
 800087a:	4f5a      	ldr	r7, [pc, #360]	; (80009e4 <HAL_GPIO_Init+0x218>)
 800087c:	2604      	movs	r6, #4
 800087e:	42b8      	cmp	r0, r7
 8000880:	d005      	beq.n	800088e <HAL_GPIO_Init+0xc2>
 8000882:	4e59      	ldr	r6, [pc, #356]	; (80009e8 <HAL_GPIO_Init+0x21c>)
 8000884:	46b1      	mov	r9, r6
 8000886:	2605      	movs	r6, #5
 8000888:	4548      	cmp	r0, r9
 800088a:	d000      	beq.n	800088e <HAL_GPIO_Init+0xc2>
 800088c:	2606      	movs	r6, #6
 800088e:	4647      	mov	r7, r8
 8000890:	40be      	lsls	r6, r7
 8000892:	4657      	mov	r7, sl
 8000894:	4337      	orrs	r7, r6
 8000896:	46ba      	mov	sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000898:	4656      	mov	r6, sl

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800089a:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2U] = temp;
 800089c:	60ae      	str	r6, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 800089e:	465e      	mov	r6, fp
        temp = EXTI->IMR;
 80008a0:	4d52      	ldr	r5, [pc, #328]	; (80009ec <HAL_GPIO_Init+0x220>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80008a2:	027f      	lsls	r7, r7, #9
        temp &= ~((uint32_t)iocurrent);
 80008a4:	43f6      	mvns	r6, r6
        temp = EXTI->IMR;
 80008a6:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80008a8:	423c      	tst	r4, r7
 80008aa:	d000      	beq.n	80008ae <HAL_GPIO_Init+0xe2>
 80008ac:	e07b      	b.n	80009a6 <HAL_GPIO_Init+0x1da>
        temp &= ~((uint32_t)iocurrent);
 80008ae:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80008b0:	4f4e      	ldr	r7, [pc, #312]	; (80009ec <HAL_GPIO_Init+0x220>)
 80008b2:	603d      	str	r5, [r7, #0]

        temp = EXTI->EMR;
 80008b4:	687d      	ldr	r5, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80008b6:	03a7      	lsls	r7, r4, #14
 80008b8:	d500      	bpl.n	80008bc <HAL_GPIO_Init+0xf0>
 80008ba:	e071      	b.n	80009a0 <HAL_GPIO_Init+0x1d4>
        temp &= ~((uint32_t)iocurrent);
 80008bc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80008be:	4f4b      	ldr	r7, [pc, #300]	; (80009ec <HAL_GPIO_Init+0x220>)
 80008c0:	607d      	str	r5, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008c2:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80008c4:	02e7      	lsls	r7, r4, #11
 80008c6:	d468      	bmi.n	800099a <HAL_GPIO_Init+0x1ce>
        temp &= ~((uint32_t)iocurrent);
 80008c8:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80008ca:	4f48      	ldr	r7, [pc, #288]	; (80009ec <HAL_GPIO_Init+0x220>)
 80008cc:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 80008ce:	68fd      	ldr	r5, [r7, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80008d0:	02a4      	lsls	r4, r4, #10
 80008d2:	d45e      	bmi.n	8000992 <HAL_GPIO_Init+0x1c6>
        temp &= ~((uint32_t)iocurrent);
 80008d4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80008d6:	4c45      	ldr	r4, [pc, #276]	; (80009ec <HAL_GPIO_Init+0x220>)
 80008d8:	60e5      	str	r5, [r4, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80008da:	000c      	movs	r4, r1
      }
    }
    position++;
 80008dc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80008de:	40dc      	lsrs	r4, r3
 80008e0:	3202      	adds	r2, #2
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d181      	bne.n	80007ea <HAL_GPIO_Init+0x1e>
  }
}
 80008e6:	b003      	add	sp, #12
 80008e8:	bcf0      	pop	{r4, r5, r6, r7}
 80008ea:	46bb      	mov	fp, r7
 80008ec:	46b2      	mov	sl, r6
 80008ee:	46a9      	mov	r9, r5
 80008f0:	46a0      	mov	r8, r4
 80008f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80008f4:	6885      	ldr	r5, [r0, #8]
 80008f6:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80008f8:	2503      	movs	r5, #3
 80008fa:	4095      	lsls	r5, r2
 80008fc:	46aa      	mov	sl, r5
 80008fe:	43ed      	mvns	r5, r5
 8000900:	464f      	mov	r7, r9
 8000902:	9501      	str	r5, [sp, #4]
 8000904:	4655      	mov	r5, sl
 8000906:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000908:	4665      	mov	r5, ip
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800090a:	46ba      	mov	sl, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800090c:	68ef      	ldr	r7, [r5, #12]
 800090e:	4097      	lsls	r7, r2
 8000910:	46b9      	mov	r9, r7
 8000912:	4657      	mov	r7, sl
 8000914:	464d      	mov	r5, r9
 8000916:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8000918:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800091a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800091c:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091e:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000920:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000922:	0926      	lsrs	r6, r4, #4
 8000924:	402e      	ands	r6, r5
 8000926:	409e      	lsls	r6, r3
 8000928:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800092a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800092c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800092e:	9d01      	ldr	r5, [sp, #4]
 8000930:	402e      	ands	r6, r5
 8000932:	46b1      	mov	r9, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000934:	4666      	mov	r6, ip
 8000936:	68b6      	ldr	r6, [r6, #8]
 8000938:	464f      	mov	r7, r9
 800093a:	4096      	lsls	r6, r2
 800093c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800093e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000940:	4647      	mov	r7, r8
 8000942:	4646      	mov	r6, r8
 8000944:	4096      	lsls	r6, r2
 8000946:	2f02      	cmp	r7, #2
 8000948:	d000      	beq.n	800094c <HAL_GPIO_Init+0x180>
 800094a:	e766      	b.n	800081a <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 800094c:	08dd      	lsrs	r5, r3, #3
 800094e:	00ad      	lsls	r5, r5, #2
 8000950:	46a8      	mov	r8, r5
 8000952:	4480      	add	r8, r0
 8000954:	4645      	mov	r5, r8
 8000956:	6a2d      	ldr	r5, [r5, #32]
 8000958:	46aa      	mov	sl, r5
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800095a:	2507      	movs	r5, #7
 800095c:	002f      	movs	r7, r5
 800095e:	401f      	ands	r7, r3
 8000960:	00bd      	lsls	r5, r7, #2
 8000962:	270f      	movs	r7, #15
 8000964:	46a9      	mov	r9, r5
 8000966:	40af      	lsls	r7, r5
 8000968:	4655      	mov	r5, sl
 800096a:	43bd      	bics	r5, r7
 800096c:	46aa      	mov	sl, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800096e:	4665      	mov	r5, ip
 8000970:	464f      	mov	r7, r9
 8000972:	692d      	ldr	r5, [r5, #16]
 8000974:	40bd      	lsls	r5, r7
 8000976:	46a9      	mov	r9, r5
 8000978:	4655      	mov	r5, sl
 800097a:	464f      	mov	r7, r9
 800097c:	433d      	orrs	r5, r7
 800097e:	46aa      	mov	sl, r5
        GPIOx->AFR[position >> 3U] = temp;
 8000980:	4645      	mov	r5, r8
 8000982:	4657      	mov	r7, sl
 8000984:	622f      	str	r7, [r5, #32]
 8000986:	e748      	b.n	800081a <HAL_GPIO_Init+0x4e>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000988:	2503      	movs	r5, #3
 800098a:	4095      	lsls	r5, r2
 800098c:	43ed      	mvns	r5, r5
 800098e:	9501      	str	r5, [sp, #4]
 8000990:	e7cc      	b.n	800092c <HAL_GPIO_Init+0x160>
          temp |= iocurrent;
 8000992:	465c      	mov	r4, fp
 8000994:	432c      	orrs	r4, r5
 8000996:	0025      	movs	r5, r4
 8000998:	e79d      	b.n	80008d6 <HAL_GPIO_Init+0x10a>
          temp |= iocurrent;
 800099a:	465f      	mov	r7, fp
 800099c:	433d      	orrs	r5, r7
 800099e:	e794      	b.n	80008ca <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 80009a0:	465f      	mov	r7, fp
 80009a2:	433d      	orrs	r5, r7
 80009a4:	e78b      	b.n	80008be <HAL_GPIO_Init+0xf2>
          temp |= iocurrent;
 80009a6:	465f      	mov	r7, fp
 80009a8:	433d      	orrs	r5, r7
 80009aa:	e781      	b.n	80008b0 <HAL_GPIO_Init+0xe4>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80009ac:	4646      	mov	r6, r8
 80009ae:	2701      	movs	r7, #1
 80009b0:	40b7      	lsls	r7, r6
 80009b2:	003e      	movs	r6, r7
 80009b4:	4657      	mov	r7, sl
 80009b6:	4337      	orrs	r7, r6
 80009b8:	46ba      	mov	sl, r7
 80009ba:	e76d      	b.n	8000898 <HAL_GPIO_Init+0xcc>
 80009bc:	2602      	movs	r6, #2
 80009be:	0037      	movs	r7, r6
 80009c0:	4646      	mov	r6, r8
 80009c2:	40b7      	lsls	r7, r6
 80009c4:	003e      	movs	r6, r7
 80009c6:	4657      	mov	r7, sl
 80009c8:	4337      	orrs	r7, r6
 80009ca:	46ba      	mov	sl, r7
 80009cc:	e764      	b.n	8000898 <HAL_GPIO_Init+0xcc>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000
 80009d8:	50000400 	.word	0x50000400
 80009dc:	50000800 	.word	0x50000800
 80009e0:	50000c00 	.word	0x50000c00
 80009e4:	50001000 	.word	0x50001000
 80009e8:	50001c00 	.word	0x50001c00
 80009ec:	40010400 	.word	0x40010400

080009f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009f4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80009f6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80009f8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80009fa:	e7fc      	b.n	80009f6 <HAL_GPIO_WritePin+0x6>

080009fc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009fc:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80009fe:	491c      	ldr	r1, [pc, #112]	; (8000a70 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8000a00:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000a02:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d00b      	beq.n	8000a22 <HAL_RCC_GetSysClockFreq+0x26>
 8000a0a:	2b0c      	cmp	r3, #12
 8000a0c:	d014      	beq.n	8000a38 <HAL_RCC_GetSysClockFreq+0x3c>
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d009      	beq.n	8000a26 <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000a12:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000a14:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000a16:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000a18:	041b      	lsls	r3, r3, #16
 8000a1a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8000a20:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x78>)
 8000a24:	e7fc      	b.n	8000a20 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000a26:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000a2a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000a2c:	17c0      	asrs	r0, r0, #31
 8000a2e:	4018      	ands	r0, r3
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x80>)
 8000a32:	469c      	mov	ip, r3
 8000a34:	4460      	add	r0, ip
 8000a36:	e7f3      	b.n	8000a20 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000a38:	0293      	lsls	r3, r2, #10
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a3c:	0f1b      	lsrs	r3, r3, #28
 8000a3e:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000a40:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a42:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000a44:	0f94      	lsrs	r4, r2, #30
 8000a46:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a48:	03db      	lsls	r3, r3, #15
 8000a4a:	d40c      	bmi.n	8000a66 <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000a4c:	680b      	ldr	r3, [r1, #0]
 8000a4e:	06db      	lsls	r3, r3, #27
 8000a50:	d50b      	bpl.n	8000a6a <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000a54:	2300      	movs	r3, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	f7ff fc02 	bl	8000260 <__aeabi_lmul>
 8000a5c:	0022      	movs	r2, r4
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f7ff fbde 	bl	8000220 <__aeabi_uldivmod>
 8000a64:	e7dc      	b.n	8000a20 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000a66:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x78>)
 8000a68:	e7f4      	b.n	8000a54 <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x80>)
 8000a6c:	e7f2      	b.n	8000a54 <HAL_RCC_GetSysClockFreq+0x58>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40021000 	.word	0x40021000
 8000a74:	007a1200 	.word	0x007a1200
 8000a78:	ff48e500 	.word	0xff48e500
 8000a7c:	00f42400 	.word	0x00f42400
 8000a80:	08001250 	.word	0x08001250
 8000a84:	003d0900 	.word	0x003d0900

08000a88 <HAL_RCC_OscConfig>:
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	46d6      	mov	lr, sl
 8000a8c:	464f      	mov	r7, r9
 8000a8e:	4646      	mov	r6, r8
 8000a90:	b5c0      	push	{r6, r7, lr}
 8000a92:	0004      	movs	r4, r0
 8000a94:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d100      	bne.n	8000a9c <HAL_RCC_OscConfig+0x14>
 8000a9a:	e126      	b.n	8000cea <HAL_RCC_OscConfig+0x262>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a9c:	4bca      	ldr	r3, [pc, #808]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000a9e:	250c      	movs	r5, #12
 8000aa0:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000aa2:	68de      	ldr	r6, [r3, #12]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	025b      	lsls	r3, r3, #9
 8000aa8:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aac:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aae:	07da      	lsls	r2, r3, #31
 8000ab0:	d533      	bpl.n	8000b1a <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab2:	2d08      	cmp	r5, #8
 8000ab4:	d100      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x30>
 8000ab6:	e10f      	b.n	8000cd8 <HAL_RCC_OscConfig+0x250>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ab8:	2d0c      	cmp	r5, #12
 8000aba:	d100      	bne.n	8000abe <HAL_RCC_OscConfig+0x36>
 8000abc:	e109      	b.n	8000cd2 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	6863      	ldr	r3, [r4, #4]
 8000ac2:	0252      	lsls	r2, r2, #9
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d100      	bne.n	8000aca <HAL_RCC_OscConfig+0x42>
 8000ac8:	e171      	b.n	8000dae <HAL_RCC_OscConfig+0x326>
 8000aca:	21a0      	movs	r1, #160	; 0xa0
 8000acc:	02c9      	lsls	r1, r1, #11
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d100      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x4c>
 8000ad2:	e211      	b.n	8000ef8 <HAL_RCC_OscConfig+0x470>
 8000ad4:	4fbc      	ldr	r7, [pc, #752]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000ad6:	48bd      	ldr	r0, [pc, #756]	; (8000dcc <HAL_RCC_OscConfig+0x344>)
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	4001      	ands	r1, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	9201      	str	r2, [sp, #4]
 8000ae4:	9a01      	ldr	r2, [sp, #4]
 8000ae6:	49ba      	ldr	r1, [pc, #744]	; (8000dd0 <HAL_RCC_OscConfig+0x348>)
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	400a      	ands	r2, r1
 8000aec:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d000      	beq.n	8000af4 <HAL_RCC_OscConfig+0x6c>
 8000af2:	e160      	b.n	8000db6 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
 8000af4:	f7ff fe18 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8000afc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000afe:	4699      	mov	r9, r3
 8000b00:	e006      	b.n	8000b10 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b02:	f7ff fe11 	bl	8000728 <HAL_GetTick>
 8000b06:	4643      	mov	r3, r8
 8000b08:	1ac0      	subs	r0, r0, r3
 8000b0a:	2864      	cmp	r0, #100	; 0x64
 8000b0c:	d900      	bls.n	8000b10 <HAL_RCC_OscConfig+0x88>
 8000b0e:	e1b1      	b.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b10:	464a      	mov	r2, r9
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	4213      	tst	r3, r2
 8000b16:	d1f4      	bne.n	8000b02 <HAL_RCC_OscConfig+0x7a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	079a      	lsls	r2, r3, #30
 8000b1c:	d52b      	bpl.n	8000b76 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000b1e:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000b20:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000b22:	421a      	tst	r2, r3
 8000b24:	d000      	beq.n	8000b28 <HAL_RCC_OscConfig+0xa0>
 8000b26:	e0e7      	b.n	8000cf8 <HAL_RCC_OscConfig+0x270>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b28:	2d04      	cmp	r5, #4
 8000b2a:	d100      	bne.n	8000b2e <HAL_RCC_OscConfig+0xa6>
 8000b2c:	e0ec      	b.n	8000d08 <HAL_RCC_OscConfig+0x280>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b2e:	2d0c      	cmp	r5, #12
 8000b30:	d100      	bne.n	8000b34 <HAL_RCC_OscConfig+0xac>
 8000b32:	e16f      	b.n	8000e14 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b34:	4ea4      	ldr	r6, [pc, #656]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
      if(hsi_state != RCC_HSI_OFF)
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d100      	bne.n	8000b3c <HAL_RCC_OscConfig+0xb4>
 8000b3a:	e1b2      	b.n	8000ea2 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b3c:	2109      	movs	r1, #9
 8000b3e:	6832      	ldr	r2, [r6, #0]
 8000b40:	438a      	bics	r2, r1
 8000b42:	4313      	orrs	r3, r2
 8000b44:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b46:	f7ff fdef 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b4a:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8000b4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b4e:	4698      	mov	r8, r3
 8000b50:	e005      	b.n	8000b5e <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b52:	f7ff fde9 	bl	8000728 <HAL_GetTick>
 8000b56:	1bc0      	subs	r0, r0, r7
 8000b58:	2802      	cmp	r0, #2
 8000b5a:	d900      	bls.n	8000b5e <HAL_RCC_OscConfig+0xd6>
 8000b5c:	e18a      	b.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b5e:	4642      	mov	r2, r8
 8000b60:	6833      	ldr	r3, [r6, #0]
 8000b62:	421a      	tst	r2, r3
 8000b64:	d0f5      	beq.n	8000b52 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b66:	6872      	ldr	r2, [r6, #4]
 8000b68:	6923      	ldr	r3, [r4, #16]
 8000b6a:	499a      	ldr	r1, [pc, #616]	; (8000dd4 <HAL_RCC_OscConfig+0x34c>)
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	400a      	ands	r2, r1
 8000b70:	4313      	orrs	r3, r2
 8000b72:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	06da      	lsls	r2, r3, #27
 8000b78:	d52b      	bpl.n	8000bd2 <HAL_RCC_OscConfig+0x14a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d100      	bne.n	8000b80 <HAL_RCC_OscConfig+0xf8>
 8000b7e:	e0eb      	b.n	8000d58 <HAL_RCC_OscConfig+0x2d0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b80:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8000b82:	4e91      	ldr	r6, [pc, #580]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d100      	bne.n	8000b8a <HAL_RCC_OscConfig+0x102>
 8000b88:	e1a0      	b.n	8000ecc <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_MSI_ENABLE();
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	6832      	ldr	r2, [r6, #0]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4313      	orrs	r3, r2
 8000b92:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b94:	f7ff fdc8 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8000b9c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	e005      	b.n	8000bae <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fdc1 	bl	8000728 <HAL_GetTick>
 8000ba6:	1bc0      	subs	r0, r0, r7
 8000ba8:	2802      	cmp	r0, #2
 8000baa:	d900      	bls.n	8000bae <HAL_RCC_OscConfig+0x126>
 8000bac:	e162      	b.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000bae:	4642      	mov	r2, r8
 8000bb0:	6833      	ldr	r3, [r6, #0]
 8000bb2:	4213      	tst	r3, r2
 8000bb4:	d0f5      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x11a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bb6:	6873      	ldr	r3, [r6, #4]
 8000bb8:	4a87      	ldr	r2, [pc, #540]	; (8000dd8 <HAL_RCC_OscConfig+0x350>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	6a22      	ldr	r2, [r4, #32]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bc2:	6872      	ldr	r2, [r6, #4]
 8000bc4:	69e3      	ldr	r3, [r4, #28]
 8000bc6:	0212      	lsls	r2, r2, #8
 8000bc8:	061b      	lsls	r3, r3, #24
 8000bca:	0a12      	lsrs	r2, r2, #8
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	071a      	lsls	r2, r3, #28
 8000bd4:	d519      	bpl.n	8000c0a <HAL_RCC_OscConfig+0x182>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bd6:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8000bd8:	4e7b      	ldr	r6, [pc, #492]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d100      	bne.n	8000be0 <HAL_RCC_OscConfig+0x158>
 8000bde:	e14b      	b.n	8000e78 <HAL_RCC_OscConfig+0x3f0>
      __HAL_RCC_LSI_ENABLE();
 8000be0:	2201      	movs	r2, #1
 8000be2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000be8:	f7ff fd9e 	bl	8000728 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000bec:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000bee:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	e005      	b.n	8000c00 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bf4:	f7ff fd98 	bl	8000728 <HAL_GetTick>
 8000bf8:	1bc0      	subs	r0, r0, r7
 8000bfa:	2802      	cmp	r0, #2
 8000bfc:	d900      	bls.n	8000c00 <HAL_RCC_OscConfig+0x178>
 8000bfe:	e139      	b.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c00:	4642      	mov	r2, r8
 8000c02:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000c04:	421a      	tst	r2, r3
 8000c06:	d0f5      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x16c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	075b      	lsls	r3, r3, #29
 8000c0c:	d542      	bpl.n	8000c94 <HAL_RCC_OscConfig+0x20c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c0e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c10:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c12:	4a6d      	ldr	r2, [pc, #436]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000c14:	055b      	lsls	r3, r3, #21
 8000c16:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000c18:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c1a:	4219      	tst	r1, r3
 8000c1c:	d104      	bne.n	8000c28 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8000c24:	2301      	movs	r3, #1
 8000c26:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c28:	2780      	movs	r7, #128	; 0x80
 8000c2a:	4e6c      	ldr	r6, [pc, #432]	; (8000ddc <HAL_RCC_OscConfig+0x354>)
 8000c2c:	007f      	lsls	r7, r7, #1
 8000c2e:	6833      	ldr	r3, [r6, #0]
 8000c30:	423b      	tst	r3, r7
 8000c32:	d100      	bne.n	8000c36 <HAL_RCC_OscConfig+0x1ae>
 8000c34:	e10e      	b.n	8000e54 <HAL_RCC_OscConfig+0x3cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	68a3      	ldr	r3, [r4, #8]
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <HAL_RCC_OscConfig+0x1ba>
 8000c40:	e19d      	b.n	8000f7e <HAL_RCC_OscConfig+0x4f6>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d100      	bne.n	8000c48 <HAL_RCC_OscConfig+0x1c0>
 8000c46:	e0e9      	b.n	8000e1c <HAL_RCC_OscConfig+0x394>
 8000c48:	21a0      	movs	r1, #160	; 0xa0
 8000c4a:	00c9      	lsls	r1, r1, #3
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d100      	bne.n	8000c52 <HAL_RCC_OscConfig+0x1ca>
 8000c50:	e1b7      	b.n	8000fc2 <HAL_RCC_OscConfig+0x53a>
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000c54:	4962      	ldr	r1, [pc, #392]	; (8000de0 <HAL_RCC_OscConfig+0x358>)
 8000c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c58:	400a      	ands	r2, r1
 8000c5a:	651a      	str	r2, [r3, #80]	; 0x50
 8000c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c5e:	4961      	ldr	r1, [pc, #388]	; (8000de4 <HAL_RCC_OscConfig+0x35c>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000c64:	f7ff fd60 	bl	8000728 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c68:	2780      	movs	r7, #128	; 0x80
 8000c6a:	4b57      	ldr	r3, [pc, #348]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
      tickstart = HAL_GetTick();
 8000c6c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c6e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <HAL_RCC_OscConfig+0x360>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c72:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c74:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c76:	e005      	b.n	8000c84 <HAL_RCC_OscConfig+0x1fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c78:	f7ff fd56 	bl	8000728 <HAL_GetTick>
 8000c7c:	1b80      	subs	r0, r0, r6
 8000c7e:	4548      	cmp	r0, r9
 8000c80:	d900      	bls.n	8000c84 <HAL_RCC_OscConfig+0x1fc>
 8000c82:	e0f7      	b.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c84:	4643      	mov	r3, r8
 8000c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c88:	423b      	tst	r3, r7
 8000c8a:	d0f5      	beq.n	8000c78 <HAL_RCC_OscConfig+0x1f0>
    if(pwrclkchanged == SET)
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d100      	bne.n	8000c94 <HAL_RCC_OscConfig+0x20c>
 8000c92:	e16e      	b.n	8000f72 <HAL_RCC_OscConfig+0x4ea>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d019      	beq.n	8000cce <HAL_RCC_OscConfig+0x246>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c9a:	2d0c      	cmp	r5, #12
 8000c9c:	d100      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x218>
 8000c9e:	e173      	b.n	8000f88 <HAL_RCC_OscConfig+0x500>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d100      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x21e>
 8000ca4:	e132      	b.n	8000f0c <HAL_RCC_OscConfig+0x484>
        __HAL_RCC_PLL_DISABLE();
 8000ca6:	4c48      	ldr	r4, [pc, #288]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000ca8:	4a50      	ldr	r2, [pc, #320]	; (8000dec <HAL_RCC_OscConfig+0x364>)
 8000caa:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000cac:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000cae:	4013      	ands	r3, r2
 8000cb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fd39 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000cb6:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000cb8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000cba:	e005      	b.n	8000cc8 <HAL_RCC_OscConfig+0x240>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cbc:	f7ff fd34 	bl	8000728 <HAL_GetTick>
 8000cc0:	1b40      	subs	r0, r0, r5
 8000cc2:	2802      	cmp	r0, #2
 8000cc4:	d900      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x240>
 8000cc6:	e0d5      	b.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	4233      	tst	r3, r6
 8000ccc:	d1f6      	bne.n	8000cbc <HAL_RCC_OscConfig+0x234>
  return HAL_OK;
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e00c      	b.n	8000cec <HAL_RCC_OscConfig+0x264>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d100      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x250>
 8000cd6:	e6f2      	b.n	8000abe <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	4a3b      	ldr	r2, [pc, #236]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	0392      	lsls	r2, r2, #14
 8000cde:	d400      	bmi.n	8000ce2 <HAL_RCC_OscConfig+0x25a>
 8000ce0:	e71b      	b.n	8000b1a <HAL_RCC_OscConfig+0x92>
 8000ce2:	6862      	ldr	r2, [r4, #4]
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	d000      	beq.n	8000cea <HAL_RCC_OscConfig+0x262>
 8000ce8:	e717      	b.n	8000b1a <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 8000cea:	2001      	movs	r0, #1
}
 8000cec:	b002      	add	sp, #8
 8000cee:	bce0      	pop	{r5, r6, r7}
 8000cf0:	46ba      	mov	sl, r7
 8000cf2:	46b1      	mov	r9, r6
 8000cf4:	46a8      	mov	r8, r5
 8000cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000cf8:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000cfa:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000cfc:	6801      	ldr	r1, [r0, #0]
 8000cfe:	4311      	orrs	r1, r2
 8000d00:	6001      	str	r1, [r0, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d02:	2d04      	cmp	r5, #4
 8000d04:	d000      	beq.n	8000d08 <HAL_RCC_OscConfig+0x280>
 8000d06:	e712      	b.n	8000b2e <HAL_RCC_OscConfig+0xa6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	0752      	lsls	r2, r2, #29
 8000d0e:	d501      	bpl.n	8000d14 <HAL_RCC_OscConfig+0x28c>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0ea      	beq.n	8000cea <HAL_RCC_OscConfig+0x262>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	4e2c      	ldr	r6, [pc, #176]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000d16:	6922      	ldr	r2, [r4, #16]
 8000d18:	6871      	ldr	r1, [r6, #4]
 8000d1a:	482e      	ldr	r0, [pc, #184]	; (8000dd4 <HAL_RCC_OscConfig+0x34c>)
 8000d1c:	0212      	lsls	r2, r2, #8
 8000d1e:	4001      	ands	r1, r0
 8000d20:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d22:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d24:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d26:	6832      	ldr	r2, [r6, #0]
 8000d28:	438a      	bics	r2, r1
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d2e:	f7ff fe65 	bl	80009fc <HAL_RCC_GetSysClockFreq>
 8000d32:	68f3      	ldr	r3, [r6, #12]
 8000d34:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <HAL_RCC_OscConfig+0x368>)
 8000d36:	061b      	lsls	r3, r3, #24
 8000d38:	0f1b      	lsrs	r3, r3, #28
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	40d8      	lsrs	r0, r3
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_RCC_OscConfig+0x36c>)
 8000d40:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8000d42:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <HAL_RCC_OscConfig+0x370>)
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	f7ff fca9 	bl	800069c <HAL_InitTick>
      if(status != HAL_OK)
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d1ce      	bne.n	8000cec <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	06da      	lsls	r2, r3, #27
 8000d52:	d400      	bmi.n	8000d56 <HAL_RCC_OscConfig+0x2ce>
 8000d54:	e73d      	b.n	8000bd2 <HAL_RCC_OscConfig+0x14a>
 8000d56:	e710      	b.n	8000b7a <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	059b      	lsls	r3, r3, #22
 8000d5e:	d502      	bpl.n	8000d66 <HAL_RCC_OscConfig+0x2de>
 8000d60:	69a3      	ldr	r3, [r4, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0c1      	beq.n	8000cea <HAL_RCC_OscConfig+0x262>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d66:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000d68:	481b      	ldr	r0, [pc, #108]	; (8000dd8 <HAL_RCC_OscConfig+0x350>)
 8000d6a:	6851      	ldr	r1, [r2, #4]
 8000d6c:	6a23      	ldr	r3, [r4, #32]
 8000d6e:	4001      	ands	r1, r0
 8000d70:	4319      	orrs	r1, r3
 8000d72:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d74:	6850      	ldr	r0, [r2, #4]
 8000d76:	69e1      	ldr	r1, [r4, #28]
 8000d78:	0200      	lsls	r0, r0, #8
 8000d7a:	0a00      	lsrs	r0, r0, #8
 8000d7c:	0609      	lsls	r1, r1, #24
 8000d7e:	4301      	orrs	r1, r0
 8000d80:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d82:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0b5b      	lsrs	r3, r3, #13
 8000d88:	3301      	adds	r3, #1
 8000d8a:	0212      	lsls	r2, r2, #8
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d90:	060a      	lsls	r2, r1, #24
 8000d92:	4917      	ldr	r1, [pc, #92]	; (8000df0 <HAL_RCC_OscConfig+0x368>)
 8000d94:	0f12      	lsrs	r2, r2, #28
 8000d96:	5c8a      	ldrb	r2, [r1, r2]
 8000d98:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d9a:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <HAL_RCC_OscConfig+0x36c>)
 8000d9c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_RCC_OscConfig+0x370>)
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	f7ff fc7b 	bl	800069c <HAL_InitTick>
        if(status != HAL_OK)
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d1a0      	bne.n	8000cec <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	e711      	b.n	8000bd2 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
 8000db0:	680a      	ldr	r2, [r1, #0]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fcb7 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dba:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_RCC_OscConfig+0x340>)
        tickstart = HAL_GetTick();
 8000dbc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	029b      	lsls	r3, r3, #10
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	e01e      	b.n	8000e06 <HAL_RCC_OscConfig+0x37e>
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	fffeffff 	.word	0xfffeffff
 8000dd0:	fffbffff 	.word	0xfffbffff
 8000dd4:	ffffe0ff 	.word	0xffffe0ff
 8000dd8:	ffff1fff 	.word	0xffff1fff
 8000ddc:	40007000 	.word	0x40007000
 8000de0:	fffffeff 	.word	0xfffffeff
 8000de4:	fffffbff 	.word	0xfffffbff
 8000de8:	00001388 	.word	0x00001388
 8000dec:	feffffff 	.word	0xfeffffff
 8000df0:	08001240 	.word	0x08001240
 8000df4:	2000001c 	.word	0x2000001c
 8000df8:	20000024 	.word	0x20000024
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fc94 	bl	8000728 <HAL_GetTick>
 8000e00:	1bc0      	subs	r0, r0, r7
 8000e02:	2864      	cmp	r0, #100	; 0x64
 8000e04:	d836      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e06:	464b      	mov	r3, r9
 8000e08:	4642      	mov	r2, r8
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4213      	tst	r3, r2
 8000e0e:	d0f5      	beq.n	8000dfc <HAL_RCC_OscConfig+0x374>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	e682      	b.n	8000b1a <HAL_RCC_OscConfig+0x92>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e14:	2e00      	cmp	r6, #0
 8000e16:	d000      	beq.n	8000e1a <HAL_RCC_OscConfig+0x392>
 8000e18:	e68c      	b.n	8000b34 <HAL_RCC_OscConfig+0xac>
 8000e1a:	e775      	b.n	8000d08 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e1c:	4e6e      	ldr	r6, [pc, #440]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
 8000e1e:	4a6f      	ldr	r2, [pc, #444]	; (8000fdc <HAL_RCC_OscConfig+0x554>)
 8000e20:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000e22:	4013      	ands	r3, r2
 8000e24:	6533      	str	r3, [r6, #80]	; 0x50
 8000e26:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000e28:	4a6d      	ldr	r2, [pc, #436]	; (8000fe0 <HAL_RCC_OscConfig+0x558>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fc7b 	bl	8000728 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e38:	4b6a      	ldr	r3, [pc, #424]	; (8000fe4 <HAL_RCC_OscConfig+0x55c>)
      tickstart = HAL_GetTick();
 8000e3a:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3c:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e3e:	e004      	b.n	8000e4a <HAL_RCC_OscConfig+0x3c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e40:	f7ff fc72 	bl	8000728 <HAL_GetTick>
 8000e44:	1bc0      	subs	r0, r0, r7
 8000e46:	4548      	cmp	r0, r9
 8000e48:	d814      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e4a:	4642      	mov	r2, r8
 8000e4c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000e4e:	4213      	tst	r3, r2
 8000e50:	d1f6      	bne.n	8000e40 <HAL_RCC_OscConfig+0x3b8>
 8000e52:	e71b      	b.n	8000c8c <HAL_RCC_OscConfig+0x204>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e54:	6833      	ldr	r3, [r6, #0]
 8000e56:	433b      	orrs	r3, r7
 8000e58:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fc65 	bl	8000728 <HAL_GetTick>
 8000e5e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	6833      	ldr	r3, [r6, #0]
 8000e62:	423b      	tst	r3, r7
 8000e64:	d000      	beq.n	8000e68 <HAL_RCC_OscConfig+0x3e0>
 8000e66:	e6e6      	b.n	8000c36 <HAL_RCC_OscConfig+0x1ae>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e68:	f7ff fc5e 	bl	8000728 <HAL_GetTick>
 8000e6c:	4643      	mov	r3, r8
 8000e6e:	1ac0      	subs	r0, r0, r3
 8000e70:	2864      	cmp	r0, #100	; 0x64
 8000e72:	d9f5      	bls.n	8000e60 <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8000e74:	2003      	movs	r0, #3
 8000e76:	e739      	b.n	8000cec <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_LSI_DISABLE();
 8000e78:	2201      	movs	r2, #1
 8000e7a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000e7c:	4393      	bics	r3, r2
 8000e7e:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000e80:	f7ff fc52 	bl	8000728 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e84:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000e86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e88:	4698      	mov	r8, r3
 8000e8a:	e004      	b.n	8000e96 <HAL_RCC_OscConfig+0x40e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fc4c 	bl	8000728 <HAL_GetTick>
 8000e90:	1bc0      	subs	r0, r0, r7
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d8ee      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e96:	4642      	mov	r2, r8
 8000e98:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000e9a:	421a      	tst	r2, r3
 8000e9c:	d1f6      	bne.n	8000e8c <HAL_RCC_OscConfig+0x404>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	e6b3      	b.n	8000c0a <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_DISABLE();
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	6833      	ldr	r3, [r6, #0]
 8000ea6:	4393      	bics	r3, r2
 8000ea8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fc3d 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000eae:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8000eb0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000eb2:	4698      	mov	r8, r3
 8000eb4:	e004      	b.n	8000ec0 <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fc37 	bl	8000728 <HAL_GetTick>
 8000eba:	1bc0      	subs	r0, r0, r7
 8000ebc:	2802      	cmp	r0, #2
 8000ebe:	d8d9      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	6833      	ldr	r3, [r6, #0]
 8000ec4:	421a      	tst	r2, r3
 8000ec6:	d1f6      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x42e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	e741      	b.n	8000d50 <HAL_RCC_OscConfig+0x2c8>
        __HAL_RCC_MSI_DISABLE();
 8000ecc:	6833      	ldr	r3, [r6, #0]
 8000ece:	4a43      	ldr	r2, [pc, #268]	; (8000fdc <HAL_RCC_OscConfig+0x554>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc28 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8000edc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000ede:	4698      	mov	r8, r3
 8000ee0:	e004      	b.n	8000eec <HAL_RCC_OscConfig+0x464>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fc21 	bl	8000728 <HAL_GetTick>
 8000ee6:	1bc0      	subs	r0, r0, r7
 8000ee8:	2802      	cmp	r0, #2
 8000eea:	d8c3      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000eec:	4642      	mov	r2, r8
 8000eee:	6833      	ldr	r3, [r6, #0]
 8000ef0:	4213      	tst	r3, r2
 8000ef2:	d1f6      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x45a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	e66c      	b.n	8000bd2 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
 8000efc:	02c9      	lsls	r1, r1, #11
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	4301      	orrs	r1, r0
 8000f02:	6019      	str	r1, [r3, #0]
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f0a:	e754      	b.n	8000db6 <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8000f0c:	4d32      	ldr	r5, [pc, #200]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <HAL_RCC_OscConfig+0x560>)
 8000f10:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f12:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f14:	4013      	ands	r3, r2
 8000f16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc06 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f1c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000f1e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f20:	e004      	b.n	8000f2c <HAL_RCC_OscConfig+0x4a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f22:	f7ff fc01 	bl	8000728 <HAL_GetTick>
 8000f26:	1b80      	subs	r0, r0, r6
 8000f28:	2802      	cmp	r0, #2
 8000f2a:	d8a3      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	423b      	tst	r3, r7
 8000f30:	d1f7      	bne.n	8000f22 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f36:	68ea      	ldr	r2, [r5, #12]
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	492c      	ldr	r1, [pc, #176]	; (8000fec <HAL_RCC_OscConfig+0x564>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f3c:	4e26      	ldr	r6, [pc, #152]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f3e:	400a      	ands	r2, r1
 8000f40:	4313      	orrs	r3, r2
 8000f42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f44:	4313      	orrs	r3, r2
 8000f46:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	682a      	ldr	r2, [r5, #0]
 8000f4c:	045b      	lsls	r3, r3, #17
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f52:	f7ff fbe9 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f56:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f58:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f5a:	04ad      	lsls	r5, r5, #18
 8000f5c:	e004      	b.n	8000f68 <HAL_RCC_OscConfig+0x4e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff fbe3 	bl	8000728 <HAL_GetTick>
 8000f62:	1b00      	subs	r0, r0, r4
 8000f64:	2802      	cmp	r0, #2
 8000f66:	d885      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f68:	6833      	ldr	r3, [r6, #0]
 8000f6a:	422b      	tst	r3, r5
 8000f6c:	d0f7      	beq.n	8000f5e <HAL_RCC_OscConfig+0x4d6>
  return HAL_OK;
 8000f6e:	2000      	movs	r0, #0
 8000f70:	e6bc      	b.n	8000cec <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f72:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
 8000f74:	491e      	ldr	r1, [pc, #120]	; (8000ff0 <HAL_RCC_OscConfig+0x568>)
 8000f76:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000f78:	400b      	ands	r3, r1
 8000f7a:	6393      	str	r3, [r2, #56]	; 0x38
 8000f7c:	e68a      	b.n	8000c94 <HAL_RCC_OscConfig+0x20c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
 8000f80:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000f82:	430b      	orrs	r3, r1
 8000f84:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f86:	e66d      	b.n	8000c64 <HAL_RCC_OscConfig+0x1dc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d100      	bne.n	8000f8e <HAL_RCC_OscConfig+0x506>
 8000f8c:	e6ad      	b.n	8000cea <HAL_RCC_OscConfig+0x262>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f8e:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8000f94:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f96:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	428a      	cmp	r2, r1
 8000f9e:	d000      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x51a>
 8000fa0:	e6a4      	b.n	8000cec <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000fa2:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000fa6:	0392      	lsls	r2, r2, #14
 8000fa8:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000faa:	428a      	cmp	r2, r1
 8000fac:	d000      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x528>
 8000fae:	e69d      	b.n	8000cec <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000fb0:	20c0      	movs	r0, #192	; 0xc0
 8000fb2:	0400      	lsls	r0, r0, #16
 8000fb4:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000fb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000fb8:	1a18      	subs	r0, r3, r0
 8000fba:	1e43      	subs	r3, r0, #1
 8000fbc:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 8000fbe:	b2c0      	uxtb	r0, r0
 8000fc0:	e694      	b.n	8000cec <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_OscConfig+0x550>)
 8000fc4:	3901      	subs	r1, #1
 8000fc6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000fc8:	39ff      	subs	r1, #255	; 0xff
 8000fca:	4301      	orrs	r1, r0
 8000fcc:	6519      	str	r1, [r3, #80]	; 0x50
 8000fce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	651a      	str	r2, [r3, #80]	; 0x50
 8000fd4:	e646      	b.n	8000c64 <HAL_RCC_OscConfig+0x1dc>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	fffffeff 	.word	0xfffffeff
 8000fe0:	fffffbff 	.word	0xfffffbff
 8000fe4:	00001388 	.word	0x00001388
 8000fe8:	feffffff 	.word	0xfeffffff
 8000fec:	ff02ffff 	.word	0xff02ffff
 8000ff0:	efffffff 	.word	0xefffffff

08000ff4 <HAL_RCC_ClockConfig>:
{
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	46ce      	mov	lr, r9
 8000ff8:	4647      	mov	r7, r8
 8000ffa:	0005      	movs	r5, r0
 8000ffc:	000c      	movs	r4, r1
 8000ffe:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8001000:	2800      	cmp	r0, #0
 8001002:	d066      	beq.n	80010d2 <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001004:	2201      	movs	r2, #1
 8001006:	4e6a      	ldr	r6, [pc, #424]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001008:	6833      	ldr	r3, [r6, #0]
 800100a:	4013      	ands	r3, r2
 800100c:	428b      	cmp	r3, r1
 800100e:	d362      	bcc.n	80010d6 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	079a      	lsls	r2, r3, #30
 8001014:	d506      	bpl.n	8001024 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001016:	20f0      	movs	r0, #240	; 0xf0
 8001018:	4966      	ldr	r1, [pc, #408]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 800101a:	68ca      	ldr	r2, [r1, #12]
 800101c:	4382      	bics	r2, r0
 800101e:	68a8      	ldr	r0, [r5, #8]
 8001020:	4302      	orrs	r2, r0
 8001022:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001024:	07db      	lsls	r3, r3, #31
 8001026:	d52d      	bpl.n	8001084 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001028:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102a:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800102c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102e:	2a02      	cmp	r2, #2
 8001030:	d04d      	beq.n	80010ce <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001032:	2a03      	cmp	r2, #3
 8001034:	d100      	bne.n	8001038 <HAL_RCC_ClockConfig+0x44>
 8001036:	e06f      	b.n	8001118 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001038:	2a01      	cmp	r2, #1
 800103a:	d100      	bne.n	800103e <HAL_RCC_ClockConfig+0x4a>
 800103c:	e0a3      	b.n	8001186 <HAL_RCC_ClockConfig+0x192>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800103e:	059b      	lsls	r3, r3, #22
 8001040:	d547      	bpl.n	80010d2 <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001042:	2103      	movs	r1, #3
 8001044:	4e5b      	ldr	r6, [pc, #364]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001046:	68f3      	ldr	r3, [r6, #12]
 8001048:	438b      	bics	r3, r1
 800104a:	4313      	orrs	r3, r2
 800104c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800104e:	f7ff fb6b 	bl	8000728 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001052:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001054:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001056:	2b02      	cmp	r3, #2
 8001058:	d100      	bne.n	800105c <HAL_RCC_ClockConfig+0x68>
 800105a:	e074      	b.n	8001146 <HAL_RCC_ClockConfig+0x152>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800105c:	2b03      	cmp	r3, #3
 800105e:	d100      	bne.n	8001062 <HAL_RCC_ClockConfig+0x6e>
 8001060:	e081      	b.n	8001166 <HAL_RCC_ClockConfig+0x172>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001062:	2b01      	cmp	r3, #1
 8001064:	d100      	bne.n	8001068 <HAL_RCC_ClockConfig+0x74>
 8001066:	e093      	b.n	8001190 <HAL_RCC_ClockConfig+0x19c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001068:	230c      	movs	r3, #12
 800106a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106c:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	4699      	mov	r9, r3
 8001070:	e004      	b.n	800107c <HAL_RCC_ClockConfig+0x88>
 8001072:	f7ff fb59 	bl	8000728 <HAL_GetTick>
 8001076:	1bc0      	subs	r0, r0, r7
 8001078:	4548      	cmp	r0, r9
 800107a:	d842      	bhi.n	8001102 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800107c:	4642      	mov	r2, r8
 800107e:	68f3      	ldr	r3, [r6, #12]
 8001080:	421a      	tst	r2, r3
 8001082:	d1f6      	bne.n	8001072 <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001084:	2201      	movs	r2, #1
 8001086:	4e4a      	ldr	r6, [pc, #296]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	6833      	ldr	r3, [r6, #0]
 800108a:	4013      	ands	r3, r2
 800108c:	42a3      	cmp	r3, r4
 800108e:	d847      	bhi.n	8001120 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	075a      	lsls	r2, r3, #29
 8001094:	d506      	bpl.n	80010a4 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001096:	4947      	ldr	r1, [pc, #284]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001098:	4848      	ldr	r0, [pc, #288]	; (80011bc <HAL_RCC_ClockConfig+0x1c8>)
 800109a:	68ca      	ldr	r2, [r1, #12]
 800109c:	4002      	ands	r2, r0
 800109e:	68e8      	ldr	r0, [r5, #12]
 80010a0:	4302      	orrs	r2, r0
 80010a2:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a4:	071b      	lsls	r3, r3, #28
 80010a6:	d42e      	bmi.n	8001106 <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a8:	f7ff fca8 	bl	80009fc <HAL_RCC_GetSysClockFreq>
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <HAL_RCC_ClockConfig+0x1cc>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	061b      	lsls	r3, r3, #24
 80010b4:	0f1b      	lsrs	r3, r3, #28
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	40d8      	lsrs	r0, r3
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_RCC_ClockConfig+0x1d0>)
 80010bc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_RCC_ClockConfig+0x1d4>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff faeb 	bl	800069c <HAL_InitTick>
}
 80010c6:	bcc0      	pop	{r6, r7}
 80010c8:	46b9      	mov	r9, r7
 80010ca:	46b0      	mov	r8, r6
 80010cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ce:	039b      	lsls	r3, r3, #14
 80010d0:	d4b7      	bmi.n	8001042 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
 80010d4:	e7f7      	b.n	80010c6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	6833      	ldr	r3, [r6, #0]
 80010d8:	4393      	bics	r3, r2
 80010da:	430b      	orrs	r3, r1
 80010dc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80010de:	f7ff fb23 	bl	8000728 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e2:	2301      	movs	r3, #1
 80010e4:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 80010e8:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ea:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ec:	4642      	mov	r2, r8
 80010ee:	6833      	ldr	r3, [r6, #0]
 80010f0:	4013      	ands	r3, r2
 80010f2:	42a3      	cmp	r3, r4
 80010f4:	d100      	bne.n	80010f8 <HAL_RCC_ClockConfig+0x104>
 80010f6:	e78b      	b.n	8001010 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f7ff fb16 	bl	8000728 <HAL_GetTick>
 80010fc:	1bc0      	subs	r0, r0, r7
 80010fe:	4548      	cmp	r0, r9
 8001100:	d9f4      	bls.n	80010ec <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8001102:	2003      	movs	r0, #3
 8001104:	e7df      	b.n	80010c6 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001106:	482b      	ldr	r0, [pc, #172]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	692b      	ldr	r3, [r5, #16]
 800110a:	68c1      	ldr	r1, [r0, #12]
 800110c:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <HAL_RCC_ClockConfig+0x1d8>)
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	400a      	ands	r2, r1
 8001112:	4313      	orrs	r3, r2
 8001114:	60c3      	str	r3, [r0, #12]
 8001116:	e7c7      	b.n	80010a8 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	d492      	bmi.n	8001042 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 800111c:	2001      	movs	r0, #1
 800111e:	e7d2      	b.n	80010c6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001120:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001122:	2701      	movs	r7, #1
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001124:	4393      	bics	r3, r2
 8001126:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001128:	f7ff fafe 	bl	8000728 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 800112e:	0004      	movs	r4, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	6833      	ldr	r3, [r6, #0]
 8001134:	421f      	tst	r7, r3
 8001136:	d0ab      	beq.n	8001090 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001138:	f7ff faf6 	bl	8000728 <HAL_GetTick>
 800113c:	1b00      	subs	r0, r0, r4
 800113e:	4540      	cmp	r0, r8
 8001140:	d9f7      	bls.n	8001132 <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 8001142:	2003      	movs	r0, #3
 8001144:	e7bf      	b.n	80010c6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001146:	330a      	adds	r3, #10
 8001148:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	4699      	mov	r9, r3
 800114e:	e004      	b.n	800115a <HAL_RCC_ClockConfig+0x166>
 8001150:	f7ff faea 	bl	8000728 <HAL_GetTick>
 8001154:	1bc0      	subs	r0, r0, r7
 8001156:	4548      	cmp	r0, r9
 8001158:	d8d3      	bhi.n	8001102 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800115a:	4642      	mov	r2, r8
 800115c:	68f3      	ldr	r3, [r6, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	2b08      	cmp	r3, #8
 8001162:	d1f5      	bne.n	8001150 <HAL_RCC_ClockConfig+0x15c>
 8001164:	e78e      	b.n	8001084 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001166:	3309      	adds	r3, #9
 8001168:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	4699      	mov	r9, r3
 800116e:	e004      	b.n	800117a <HAL_RCC_ClockConfig+0x186>
 8001170:	f7ff fada 	bl	8000728 <HAL_GetTick>
 8001174:	1bc0      	subs	r0, r0, r7
 8001176:	4548      	cmp	r0, r9
 8001178:	d8c3      	bhi.n	8001102 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117a:	4642      	mov	r2, r8
 800117c:	68f3      	ldr	r3, [r6, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	2b0c      	cmp	r3, #12
 8001182:	d1f5      	bne.n	8001170 <HAL_RCC_ClockConfig+0x17c>
 8001184:	e77e      	b.n	8001084 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001186:	075b      	lsls	r3, r3, #29
 8001188:	d500      	bpl.n	800118c <HAL_RCC_ClockConfig+0x198>
 800118a:	e75a      	b.n	8001042 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
 800118e:	e79a      	b.n	80010c6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001190:	330b      	adds	r3, #11
 8001192:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4699      	mov	r9, r3
 8001198:	e004      	b.n	80011a4 <HAL_RCC_ClockConfig+0x1b0>
 800119a:	f7ff fac5 	bl	8000728 <HAL_GetTick>
 800119e:	1bc0      	subs	r0, r0, r7
 80011a0:	4548      	cmp	r0, r9
 80011a2:	d8ae      	bhi.n	8001102 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a4:	4642      	mov	r2, r8
 80011a6:	68f3      	ldr	r3, [r6, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d1f5      	bne.n	800119a <HAL_RCC_ClockConfig+0x1a6>
 80011ae:	e769      	b.n	8001084 <HAL_RCC_ClockConfig+0x90>
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40021000 	.word	0x40021000
 80011b8:	00001388 	.word	0x00001388
 80011bc:	fffff8ff 	.word	0xfffff8ff
 80011c0:	08001240 	.word	0x08001240
 80011c4:	2000001c 	.word	0x2000001c
 80011c8:	20000024 	.word	0x20000024
 80011cc:	ffffc7ff 	.word	0xffffc7ff

080011d0 <__libc_init_array>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	2600      	movs	r6, #0
 80011d4:	4d0c      	ldr	r5, [pc, #48]	; (8001208 <__libc_init_array+0x38>)
 80011d6:	4c0d      	ldr	r4, [pc, #52]	; (800120c <__libc_init_array+0x3c>)
 80011d8:	1b64      	subs	r4, r4, r5
 80011da:	10a4      	asrs	r4, r4, #2
 80011dc:	42a6      	cmp	r6, r4
 80011de:	d109      	bne.n	80011f4 <__libc_init_array+0x24>
 80011e0:	2600      	movs	r6, #0
 80011e2:	f000 f821 	bl	8001228 <_init>
 80011e6:	4d0a      	ldr	r5, [pc, #40]	; (8001210 <__libc_init_array+0x40>)
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <__libc_init_array+0x44>)
 80011ea:	1b64      	subs	r4, r4, r5
 80011ec:	10a4      	asrs	r4, r4, #2
 80011ee:	42a6      	cmp	r6, r4
 80011f0:	d105      	bne.n	80011fe <__libc_init_array+0x2e>
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
 80011f4:	00b3      	lsls	r3, r6, #2
 80011f6:	58eb      	ldr	r3, [r5, r3]
 80011f8:	4798      	blx	r3
 80011fa:	3601      	adds	r6, #1
 80011fc:	e7ee      	b.n	80011dc <__libc_init_array+0xc>
 80011fe:	00b3      	lsls	r3, r6, #2
 8001200:	58eb      	ldr	r3, [r5, r3]
 8001202:	4798      	blx	r3
 8001204:	3601      	adds	r6, #1
 8001206:	e7f2      	b.n	80011ee <__libc_init_array+0x1e>
 8001208:	08001264 	.word	0x08001264
 800120c:	08001264 	.word	0x08001264
 8001210:	08001264 	.word	0x08001264
 8001214:	08001268 	.word	0x08001268

08001218 <memset>:
 8001218:	0003      	movs	r3, r0
 800121a:	1882      	adds	r2, r0, r2
 800121c:	4293      	cmp	r3, r2
 800121e:	d100      	bne.n	8001222 <memset+0xa>
 8001220:	4770      	bx	lr
 8001222:	7019      	strb	r1, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	e7f9      	b.n	800121c <memset+0x4>

08001228 <_init>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122e:	bc08      	pop	{r3}
 8001230:	469e      	mov	lr, r3
 8001232:	4770      	bx	lr

08001234 <_fini>:
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123a:	bc08      	pop	{r3}
 800123c:	469e      	mov	lr, r3
 800123e:	4770      	bx	lr
