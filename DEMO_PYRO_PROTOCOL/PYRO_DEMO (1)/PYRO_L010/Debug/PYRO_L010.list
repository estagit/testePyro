
PYRO_L010.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002958  08002958  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002960  08002960  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000018  08002980  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08002980  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cfc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001408  00000000  00000000  00024d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00026148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  000267d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001093b  00000000  00000000  00026db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b1a  00000000  00000000  000376eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062e17  00000000  00000000  0003e205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a101c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000163c  00000000  00000000  000a106c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800291c 	.word	0x0800291c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	0800291c 	.word	0x0800291c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b7f      	cmp	r3, #127	; 0x7f
 80004ba:	d809      	bhi.n	80004d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	001a      	movs	r2, r3
 80004c2:	231f      	movs	r3, #31
 80004c4:	401a      	ands	r2, r3
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <__NVIC_EnableIRQ+0x30>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	4091      	lsls	r1, r2
 80004cc:	000a      	movs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
  }
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	e000e100 	.word	0xe000e100

080004dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	0002      	movs	r2, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b7f      	cmp	r3, #127	; 0x7f
 80004f0:	d828      	bhi.n	8000544 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f2:	4a2f      	ldr	r2, [pc, #188]	; (80005b0 <__NVIC_SetPriority+0xd4>)
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	089b      	lsrs	r3, r3, #2
 80004fc:	33c0      	adds	r3, #192	; 0xc0
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	589b      	ldr	r3, [r3, r2]
 8000502:	1dfa      	adds	r2, r7, #7
 8000504:	7812      	ldrb	r2, [r2, #0]
 8000506:	0011      	movs	r1, r2
 8000508:	2203      	movs	r2, #3
 800050a:	400a      	ands	r2, r1
 800050c:	00d2      	lsls	r2, r2, #3
 800050e:	21ff      	movs	r1, #255	; 0xff
 8000510:	4091      	lsls	r1, r2
 8000512:	000a      	movs	r2, r1
 8000514:	43d2      	mvns	r2, r2
 8000516:	401a      	ands	r2, r3
 8000518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	019b      	lsls	r3, r3, #6
 800051e:	22ff      	movs	r2, #255	; 0xff
 8000520:	401a      	ands	r2, r3
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	0018      	movs	r0, r3
 8000528:	2303      	movs	r3, #3
 800052a:	4003      	ands	r3, r0
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000530:	481f      	ldr	r0, [pc, #124]	; (80005b0 <__NVIC_SetPriority+0xd4>)
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b25b      	sxtb	r3, r3
 8000538:	089b      	lsrs	r3, r3, #2
 800053a:	430a      	orrs	r2, r1
 800053c:	33c0      	adds	r3, #192	; 0xc0
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000542:	e031      	b.n	80005a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <__NVIC_SetPriority+0xd8>)
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	0019      	movs	r1, r3
 800054c:	230f      	movs	r3, #15
 800054e:	400b      	ands	r3, r1
 8000550:	3b08      	subs	r3, #8
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	3306      	adds	r3, #6
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	18d3      	adds	r3, r2, r3
 800055a:	3304      	adds	r3, #4
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1dfa      	adds	r2, r7, #7
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	0011      	movs	r1, r2
 8000564:	2203      	movs	r2, #3
 8000566:	400a      	ands	r2, r1
 8000568:	00d2      	lsls	r2, r2, #3
 800056a:	21ff      	movs	r1, #255	; 0xff
 800056c:	4091      	lsls	r1, r2
 800056e:	000a      	movs	r2, r1
 8000570:	43d2      	mvns	r2, r2
 8000572:	401a      	ands	r2, r3
 8000574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	019b      	lsls	r3, r3, #6
 800057a:	22ff      	movs	r2, #255	; 0xff
 800057c:	401a      	ands	r2, r3
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	0018      	movs	r0, r3
 8000584:	2303      	movs	r3, #3
 8000586:	4003      	ands	r3, r0
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <__NVIC_SetPriority+0xd8>)
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	001c      	movs	r4, r3
 8000594:	230f      	movs	r3, #15
 8000596:	4023      	ands	r3, r4
 8000598:	3b08      	subs	r3, #8
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	430a      	orrs	r2, r1
 800059e:	3306      	adds	r3, #6
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	18c3      	adds	r3, r0, r3
 80005a4:	3304      	adds	r3, #4
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b003      	add	sp, #12
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	e000e100 	.word	0xe000e100
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LL_DMA_EnableChannel+0x38>)
 80005c8:	5cd3      	ldrb	r3, [r2, r3]
 80005ca:	001a      	movs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	18d3      	adds	r3, r2, r3
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4906      	ldr	r1, [pc, #24]	; (80005f0 <LL_DMA_EnableChannel+0x38>)
 80005d8:	5ccb      	ldrb	r3, [r1, r3]
 80005da:	0019      	movs	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	18cb      	adds	r3, r1, r3
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	08002934 	.word	0x08002934

080005f4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <LL_DMA_SetDataTransferDirection+0x40>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	001a      	movs	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	18d3      	adds	r3, r2, r3
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <LL_DMA_SetDataTransferDirection+0x44>)
 8000612:	4013      	ands	r3, r2
 8000614:	0019      	movs	r1, r3
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	3b01      	subs	r3, #1
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <LL_DMA_SetDataTransferDirection+0x40>)
 800061c:	5cd3      	ldrb	r3, [r2, r3]
 800061e:	001a      	movs	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	18d3      	adds	r3, r2, r3
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b004      	add	sp, #16
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	08002934 	.word	0x08002934
 8000638:	ffffbfef 	.word	0xffffbfef

0800063c <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	3b01      	subs	r3, #1
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <LL_DMA_GetDataTransferDirection+0x28>)
 800064c:	5cd3      	ldrb	r3, [r2, r3]
 800064e:	001a      	movs	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	18d3      	adds	r3, r2, r3
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000658:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 800065a:	0018      	movs	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	08002934 	.word	0x08002934
 8000668:	00004010 	.word	0x00004010

0800066c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	3b01      	subs	r3, #1
 800067c:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <LL_DMA_SetMode+0x40>)
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	001a      	movs	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	18d3      	adds	r3, r2, r3
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2220      	movs	r2, #32
 800068a:	4393      	bics	r3, r2
 800068c:	0019      	movs	r1, r3
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	3b01      	subs	r3, #1
 8000692:	4a06      	ldr	r2, [pc, #24]	; (80006ac <LL_DMA_SetMode+0x40>)
 8000694:	5cd3      	ldrb	r3, [r2, r3]
 8000696:	001a      	movs	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	18d3      	adds	r3, r2, r3
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	430a      	orrs	r2, r1
 80006a0:	601a      	str	r2, [r3, #0]
             Mode);
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b004      	add	sp, #16
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	08002934 	.word	0x08002934

080006b0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <LL_DMA_SetPeriphIncMode+0x40>)
 80006c2:	5cd3      	ldrb	r3, [r2, r3]
 80006c4:	001a      	movs	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	18d3      	adds	r3, r2, r3
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2240      	movs	r2, #64	; 0x40
 80006ce:	4393      	bics	r3, r2
 80006d0:	0019      	movs	r1, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <LL_DMA_SetPeriphIncMode+0x40>)
 80006d8:	5cd3      	ldrb	r3, [r2, r3]
 80006da:	001a      	movs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	18d3      	adds	r3, r2, r3
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b004      	add	sp, #16
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	08002934 	.word	0x08002934

080006f4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3b01      	subs	r3, #1
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <LL_DMA_SetMemoryIncMode+0x40>)
 8000706:	5cd3      	ldrb	r3, [r2, r3]
 8000708:	001a      	movs	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	4393      	bics	r3, r2
 8000714:	0019      	movs	r1, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a06      	ldr	r2, [pc, #24]	; (8000734 <LL_DMA_SetMemoryIncMode+0x40>)
 800071c:	5cd3      	ldrb	r3, [r2, r3]
 800071e:	001a      	movs	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	18d3      	adds	r3, r2, r3
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	430a      	orrs	r2, r1
 8000728:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	08002934 	.word	0x08002934

08000738 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	3b01      	subs	r3, #1
 8000748:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <LL_DMA_SetPeriphSize+0x40>)
 800074a:	5cd3      	ldrb	r3, [r2, r3]
 800074c:	001a      	movs	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <LL_DMA_SetPeriphSize+0x44>)
 8000756:	4013      	ands	r3, r2
 8000758:	0019      	movs	r1, r3
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	3b01      	subs	r3, #1
 800075e:	4a06      	ldr	r2, [pc, #24]	; (8000778 <LL_DMA_SetPeriphSize+0x40>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	001a      	movs	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	18d3      	adds	r3, r2, r3
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b004      	add	sp, #16
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	08002934 	.word	0x08002934
 800077c:	fffffcff 	.word	0xfffffcff

08000780 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	3b01      	subs	r3, #1
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <LL_DMA_SetMemorySize+0x40>)
 8000792:	5cd3      	ldrb	r3, [r2, r3]
 8000794:	001a      	movs	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <LL_DMA_SetMemorySize+0x44>)
 800079e:	4013      	ands	r3, r2
 80007a0:	0019      	movs	r1, r3
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <LL_DMA_SetMemorySize+0x40>)
 80007a8:	5cd3      	ldrb	r3, [r2, r3]
 80007aa:	001a      	movs	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	18d3      	adds	r3, r2, r3
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b004      	add	sp, #16
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	08002934 	.word	0x08002934
 80007c4:	fffff3ff 	.word	0xfffff3ff

080007c8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	001a      	movs	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	18d3      	adds	r3, r2, r3
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <LL_DMA_SetChannelPriorityLevel+0x44>)
 80007e6:	4013      	ands	r3, r2
 80007e8:	0019      	movs	r1, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	001a      	movs	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	18d3      	adds	r3, r2, r3
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	601a      	str	r2, [r3, #0]
             Priority);
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b004      	add	sp, #16
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	08002934 	.word	0x08002934
 800080c:	ffffcfff 	.word	0xffffcfff

08000810 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	3b01      	subs	r3, #1
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LL_DMA_SetDataLength+0x3c>)
 8000822:	5cd3      	ldrb	r3, [r2, r3]
 8000824:	001a      	movs	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	18d3      	adds	r3, r2, r3
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	0419      	lsls	r1, r3, #16
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	3b01      	subs	r3, #1
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <LL_DMA_SetDataLength+0x3c>)
 8000836:	5cd3      	ldrb	r3, [r2, r3]
 8000838:	001a      	movs	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	18d3      	adds	r3, r2, r3
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	430a      	orrs	r2, r1
 8000842:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08002934 	.word	0x08002934

08000850 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2b10      	cmp	r3, #16
 8000862:	d112      	bne.n	800088a <LL_DMA_ConfigAddresses+0x3a>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3b01      	subs	r3, #1
 8000868:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <LL_DMA_ConfigAddresses+0x68>)
 800086a:	5cd3      	ldrb	r3, [r2, r3]
 800086c:	001a      	movs	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3b01      	subs	r3, #1
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <LL_DMA_ConfigAddresses+0x68>)
 800087c:	5cd3      	ldrb	r3, [r2, r3]
 800087e:	001a      	movs	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8000888:	e011      	b.n	80008ae <LL_DMA_ConfigAddresses+0x5e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3b01      	subs	r3, #1
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <LL_DMA_ConfigAddresses+0x68>)
 8000890:	5cd3      	ldrb	r3, [r2, r3]
 8000892:	001a      	movs	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	18d3      	adds	r3, r2, r3
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3b01      	subs	r3, #1
 80008a0:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <LL_DMA_ConfigAddresses+0x68>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	001a      	movs	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	60da      	str	r2, [r3, #12]
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	08002934 	.word	0x08002934

080008bc <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_14
  *         @arg @ref LL_DMA_REQUEST_15
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	33a8      	adds	r3, #168	; 0xa8
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	3a01      	subs	r2, #1
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	210f      	movs	r1, #15
 80008d6:	4091      	lsls	r1, r2
 80008d8:	000a      	movs	r2, r1
 80008da:	43d2      	mvns	r2, r2
 80008dc:	401a      	ands	r2, r3
 80008de:	0011      	movs	r1, r2
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	409a      	lsls	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	33a8      	adds	r3, #168	; 0xa8
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
             DMA_CSELR_C1S << ((Channel - 1U) * 4U), Request << DMA_POSITION_CSELR_CXS);
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b004      	add	sp, #16
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	3b01      	subs	r3, #1
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <LL_DMA_EnableIT_TC+0x38>)
 800090c:	5cd3      	ldrb	r3, [r2, r3]
 800090e:	001a      	movs	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	4906      	ldr	r1, [pc, #24]	; (8000934 <LL_DMA_EnableIT_TC+0x38>)
 800091c:	5ccb      	ldrb	r3, [r1, r3]
 800091e:	0019      	movs	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	18cb      	adds	r3, r1, r3
 8000924:	2102      	movs	r1, #2
 8000926:	430a      	orrs	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	08002934 	.word	0x08002934

08000938 <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	2201      	movs	r2, #1
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	611a      	str	r2, [r3, #16]
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	2206      	movs	r2, #6
 8000964:	4393      	bics	r3, r2
 8000966:	001a      	movs	r2, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	611a      	str	r2, [r3, #16]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <LL_LPTIM_SetUpdateMode+0x24>)
 8000988:	401a      	ands	r2, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	431a      	orrs	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60da      	str	r2, [r3, #12]
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	ffbfffff 	.word	0xffbfffff

080009a0 <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	0c1b      	lsrs	r3, r3, #16
 80009b0:	041a      	lsls	r2, r3, #16
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	619a      	str	r2, [r3, #24]
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <LL_LPTIM_SetCompare>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  CompareValue Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCompare(LPTIM_TypeDef *LPTIMx, uint32_t CompareValue)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CMP, LPTIM_CMP_CMP, CompareValue);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	0c1b      	lsrs	r3, r3, #16
 80009d2:	041a      	lsls	r2, r3, #16
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	431a      	orrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	615a      	str	r2, [r3, #20]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <LL_LPTIM_SetCounterMode+0x24>)
 80009f4:	401a      	ands	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60da      	str	r2, [r3, #12]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	ff7fffff 	.word	0xff7fffff

08000a0c <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <LL_LPTIM_SetPrescaler+0x24>)
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	431a      	orrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60da      	str	r2, [r3, #12]
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	fffff1ff 	.word	0xfffff1ff

08000a34 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <LL_LPTIM_TrigSw+0x1c>)
 8000a42:	401a      	ands	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	60da      	str	r2, [r3, #12]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	fff9ffff 	.word	0xfff9ffff

08000a54 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4393      	bics	r3, r2
 8000a66:	001a      	movs	r2, r3
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	60da      	str	r2, [r3, #12]
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <LL_LPTIM_ClearFlag_CMPOK>:
  * @rmtoll ICR          CMPOKCF       LL_LPTIM_ClearFlag_CMPOK
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFlag_CMPOK(LPTIM_TypeDef *LPTIMx)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_CMPOKCF);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2208      	movs	r2, #8
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	605a      	str	r2, [r3, #4]
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <LL_LPTIM_IsActiveFlag_CMPOK>:
  * @rmtoll ISR          CMPOK         LL_LPTIM_IsActiveFlag_CMPOK
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_CMPOK(LPTIM_TypeDef *LPTIMx)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_CMPOK) == LPTIM_ISR_CMPOK) ? 1UL : 0UL));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d101      	bne.n	8000aac <LL_LPTIM_IsActiveFlag_CMPOK+0x18>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <LL_LPTIM_IsActiveFlag_CMPOK+0x1a>
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <LL_LPTIM_ClearFlag_ARROK>:
  * @rmtoll ICR          ARROKCF       LL_LPTIM_ClearFlag_ARROK
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFlag_ARROK(LPTIM_TypeDef *LPTIMx)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARROKCF);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2210      	movs	r2, #16
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	605a      	str	r2, [r3, #4]
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <LL_LPTIM_IsActiveFlag_ARROK>:
  * @rmtoll ISR          ARROK         LL_LPTIM_IsActiveFlag_ARROK
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARROK(LPTIM_TypeDef *LPTIMx)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARROK) == LPTIM_ISR_ARROK) ? 1UL : 0UL));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2210      	movs	r2, #16
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b10      	cmp	r3, #16
 8000ae4:	d101      	bne.n	8000aea <LL_LPTIM_IsActiveFlag_ARROK+0x18>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <LL_LPTIM_IsActiveFlag_ARROK+0x1a>
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <LL_LPTIM_EnableIT_CMPM>:
  * @rmtoll IER          CMPMIE        LL_LPTIM_EnableIT_CMPM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_CMPM(LPTIM_TypeDef *LPTIMx)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_CMPMIE);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2201      	movs	r2, #1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	609a      	str	r2, [r3, #8]
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	609a      	str	r2, [r3, #8]
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2240      	movs	r2, #64	; 0x40
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2210      	movs	r2, #16
 8000b58:	4393      	bics	r3, r2
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	605a      	str	r2, [r3, #4]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d101      	bne.n	8000ba6 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	605a      	str	r2, [r3, #4]
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2202      	movs	r2, #2
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	605a      	str	r2, [r3, #4]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	330c      	adds	r3, #12
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LL_SPI_ReceiveData16>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData16
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_SPI_ReceiveData16(SPI_TypeDef *SPIx)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(SPIx->DR));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	b29b      	uxth	r3, r3
}
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6819      	ldr	r1, [r3, #0]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	435b      	muls	r3, r3
 8000c26:	001a      	movs	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	189b      	adds	r3, r3, r2
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	400b      	ands	r3, r1
 8000c32:	001a      	movs	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	435b      	muls	r3, r3
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	434b      	muls	r3, r1
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b004      	add	sp, #16
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b004      	add	sp, #16
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c82:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b004      	add	sp, #16
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <LL_APB2_GRP1_EnableClock+0x28>)
 8000cae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <LL_APB2_GRP1_EnableClock+0x28>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <LL_APB2_GRP1_EnableClock+0x28>)
 8000cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b004      	add	sp, #16
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000cda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4013      	ands	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b004      	add	sp, #16
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b5b0      	push	{r4, r5, r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d02:	f000 fbeb 	bl	80014dc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d06:	f000 f8ff 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000d0a:	f000 fa6d 	bl	80011e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d0e:	f000 f96b 	bl	8000fe8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2, (uint32_t)LL_SPI_DMA_GetRegAddr(SPI1),
 8000d12:	4b76      	ldr	r3, [pc, #472]	; (8000eec <main+0x1f0>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff67 	bl	8000be8 <LL_SPI_DMA_GetRegAddr>
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	4c74      	ldr	r4, [pc, #464]	; (8000ef0 <main+0x1f4>)
 8000d1e:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <main+0x1f8>)
 8000d20:	2102      	movs	r1, #2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fc8a 	bl	800063c <LL_DMA_GetDataTransferDirection>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	4872      	ldr	r0, [pc, #456]	; (8000ef4 <main+0x1f8>)
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	0023      	movs	r3, r4
 8000d30:	002a      	movs	r2, r5
 8000d32:	2102      	movs	r1, #2
 8000d34:	f7ff fd8c 	bl	8000850 <LL_DMA_ConfigAddresses>
			(uint32_t)(&bufferRx), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, size);
 8000d38:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <main+0x1f8>)
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff fd66 	bl	8000810 <LL_DMA_SetDataLength>
	LL_SPI_EnableDMAReq_RX(SPI1);
 8000d44:	4b69      	ldr	r3, [pc, #420]	; (8000eec <main+0x1f0>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff32 	bl	8000bb0 <LL_SPI_EnableDMAReq_RX>

	LL_SPI_Enable(SPI1);
 8000d4c:	4b67      	ldr	r3, [pc, #412]	; (8000eec <main+0x1f0>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff feec 	bl	8000b2c <LL_SPI_Enable>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000d54:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <main+0x1f8>)
 8000d56:	2102      	movs	r1, #2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fc2d 	bl	80005b8 <LL_DMA_EnableChannel>


	while(LL_SPI_IsActiveFlag_RXNE(SPI1))
 8000d5e:	e003      	b.n	8000d68 <main+0x6c>
	{
		LL_SPI_ReceiveData16(SPI1);
 8000d60:	4b62      	ldr	r3, [pc, #392]	; (8000eec <main+0x1f0>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff ff4a 	bl	8000bfc <LL_SPI_ReceiveData16>
	while(LL_SPI_IsActiveFlag_RXNE(SPI1))
 8000d68:	4b60      	ldr	r3, [pc, #384]	; (8000eec <main+0x1f0>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fefe 	bl	8000b6c <LL_SPI_IsActiveFlag_RXNE>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d1f5      	bne.n	8000d60 <main+0x64>
	}

	//Transmit Data:
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)(&bufferTx[0]),
 8000d74:	4c60      	ldr	r4, [pc, #384]	; (8000ef8 <main+0x1fc>)
			(uint32_t)LL_SPI_DMA_GetRegAddr(SPI1),
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <main+0x1f0>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff ff35 	bl	8000be8 <LL_SPI_DMA_GetRegAddr>
 8000d7e:	0005      	movs	r5, r0
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)(&bufferTx[0]),
 8000d80:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <main+0x1f8>)
 8000d82:	2103      	movs	r1, #3
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fc59 	bl	800063c <LL_DMA_GetDataTransferDirection>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	4859      	ldr	r0, [pc, #356]	; (8000ef4 <main+0x1f8>)
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	002b      	movs	r3, r5
 8000d92:	0022      	movs	r2, r4
 8000d94:	2103      	movs	r1, #3
 8000d96:	f7ff fd5b 	bl	8000850 <LL_DMA_ConfigAddresses>
			LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3));


	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, size);
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <main+0x1f8>)
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	2103      	movs	r1, #3
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fd35 	bl	8000810 <LL_DMA_SetDataLength>


	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000da6:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <main+0x1f8>)
 8000da8:	2103      	movs	r1, #3
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fc04 	bl	80005b8 <LL_DMA_EnableChannel>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <main+0x1f8>)
 8000db2:	2103      	movs	r1, #3
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fda1 	bl	80008fc <LL_DMA_EnableIT_TC>


	while(!LL_SPI_IsActiveFlag_TXE(SPI1))
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <main+0x1f0>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fee5 	bl	8000b8e <LL_SPI_IsActiveFlag_TXE>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d0f9      	beq.n	8000dbc <main+0xc0>
	{
		//		LL_SPI_TransmitData16(SPI1, (uintptr_t)bufferTx);
	}

	/* LPTIM1 Settings and Initialization */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);					// Enable the LPTIM1 Clock
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	061b      	lsls	r3, r3, #24
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff ff53 	bl	8000c78 <LL_APB1_GRP1_EnableClock>

	LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);			// Set clock source to internal
 8000dd2:	4b4a      	ldr	r3, [pc, #296]	; (8000efc <main+0x200>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fe3c 	bl	8000a54 <LL_LPTIM_SetClockSource>
	LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV1);					// Set Prescaler to 0 (Div 1)
 8000ddc:	4b47      	ldr	r3, [pc, #284]	; (8000efc <main+0x200>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fe13 	bl	8000a0c <LL_LPTIM_SetPrescaler>
	LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);			// Set Update Mode to Immediate
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <main+0x200>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fdc4 	bl	8000978 <LL_LPTIM_SetUpdateMode>
	LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);		// Set Counter Mode to Internal
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <main+0x200>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fdf5 	bl	80009e4 <LL_LPTIM_SetCounterMode>
	LL_LPTIM_TrigSw(LPTIM1);												// Set the Trigger to Software
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <main+0x200>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fe19 	bl	8000a34 <LL_LPTIM_TrigSw>
	LL_LPTIM_EnableIT_ARRM(LPTIM1);											// Enable the Auto Reload Register Match Interrupt
 8000e02:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <main+0x200>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff fe83 	bl	8000b10 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_EnableIT_CMPM(LPTIM1);											// Enable the Compare Match Interrupt
 8000e0a:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <main+0x200>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fe71 	bl	8000af4 <LL_LPTIM_EnableIT_CMPM>

	NVIC_SetPriority(LPTIM1_IRQn, 0);										// Set the NVIC Priority to 0
 8000e12:	2100      	movs	r1, #0
 8000e14:	200d      	movs	r0, #13
 8000e16:	f7ff fb61 	bl	80004dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(LPTIM1_IRQn);											// Enable the Interrupt at NVIC
 8000e1a:	200d      	movs	r0, #13
 8000e1c:	f7ff fb44 	bl	80004a8 <__NVIC_EnableIRQ>

	LL_LPTIM_Enable(LPTIM1);												// Enable the Low Power Timer 1
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <main+0x200>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fd88 	bl	8000938 <LL_LPTIM_Enable>

	LL_LPTIM_SetAutoReload(LPTIM1, PeriodValue);							// Set the Auto Reload Register value
 8000e28:	4b34      	ldr	r3, [pc, #208]	; (8000efc <main+0x200>)
 8000e2a:	214d      	movs	r1, #77	; 0x4d
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fdb7 	bl	80009a0 <LL_LPTIM_SetAutoReload>
	while(!LL_LPTIM_IsActiveFlag_ARROK(LPTIM1));							// Wait for flag to be OK
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <main+0x200>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff fe4b 	bl	8000ad2 <LL_LPTIM_IsActiveFlag_ARROK>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d0f9      	beq.n	8000e34 <main+0x138>
	LL_LPTIM_ClearFlag_ARROK(LPTIM1);										// Clear the OK Flag
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <main+0x200>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff fe37 	bl	8000ab6 <LL_LPTIM_ClearFlag_ARROK>

	LL_LPTIM_SetCompare(LPTIM1,PulseValue);									// Set the Compare Register
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <main+0x200>)
 8000e4a:	2106      	movs	r1, #6
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fdb8 	bl	80009c2 <LL_LPTIM_SetCompare>
	while(!LL_LPTIM_IsActiveFlag_CMPOK(LPTIM1));							// Wait for flag to be OK
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <main+0x200>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fe1c 	bl	8000a94 <LL_LPTIM_IsActiveFlag_CMPOK>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d0f9      	beq.n	8000e54 <main+0x158>
	LL_LPTIM_ClearFlag_CMPOK(LPTIM1);										// Clear the OK Flag
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <main+0x200>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fe08 	bl	8000a78 <LL_LPTIM_ClearFlag_CMPOK>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
 8000e68:	23a0      	movs	r3, #160	; 0xa0
 8000e6a:	05db      	lsls	r3, r3, #23
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fece 	bl	8000c12 <LL_GPIO_SetPinMode>

	LL_LPTIM_StartCounter(LPTIM1, LL_LPTIM_OPERATING_MODE_CONTINUOUS);		// Start the LPTIM1 Counter
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <main+0x200>)
 8000e78:	2104      	movs	r1, #4
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff fd6a 	bl	8000954 <LL_LPTIM_StartCounter>
	GPIOA->BSRR = LL_GPIO_PIN_7;
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	619a      	str	r2, [r3, #24]

	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);		// Enter in Stop Mode
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 fca2 	bl	80017d4 <HAL_PWR_EnterSTOPMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/* Wait for Wake UP on Falling Edge */
		while(!forcePulseFlag);
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <main+0x204>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0fb      	beq.n	8000e92 <main+0x196>

		/* Start SPI & DMA */
		LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 8000e9a:	23a0      	movs	r3, #160	; 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff feb5 	bl	8000c12 <LL_GPIO_SetPinMode>
		LL_SPI_EnableDMAReq_TX(SPI1);
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <main+0x1f0>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff fe8e 	bl	8000bcc <LL_SPI_EnableDMAReq_TX>
//		LL_SPI_TransmitData16(SPI1, (uintptr_t)bufferTx);

		/* Enter in Low Power Run mode */
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 fc36 	bl	8001724 <HAL_PWR_EnterSLEEPMode>

		while(!spiFlag);
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <main+0x208>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0fb      	beq.n	8000eba <main+0x1be>
		LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
 8000ec2:	23a0      	movs	r3, #160	; 0xa0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fea1 	bl	8000c12 <LL_GPIO_SetPinMode>

		spiFlag = RESET;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <main+0x208>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]

		/* Wait for Wake UP on Rising Edge */
		while(forcePulseFlag);
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <main+0x204>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1fb      	bne.n	8000ed8 <main+0x1dc>

		/* Enter in STOP mode */
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 fc76 	bl	80017d4 <HAL_PWR_EnterSTOPMode>
		while(!forcePulseFlag);
 8000ee8:	e7d2      	b.n	8000e90 <main+0x194>
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	20000038 	.word	0x20000038
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	40007c00 	.word	0x40007c00
 8000f00:	20000034 	.word	0x20000034
 8000f04:	20000035 	.word	0x20000035

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b099      	sub	sp, #100	; 0x64
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	242c      	movs	r4, #44	; 0x2c
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	0018      	movs	r0, r3
 8000f14:	2334      	movs	r3, #52	; 0x34
 8000f16:	001a      	movs	r2, r3
 8000f18:	2100      	movs	r1, #0
 8000f1a:	f001 fcf7 	bl	800290c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1e:	2318      	movs	r3, #24
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	0018      	movs	r0, r3
 8000f24:	2314      	movs	r3, #20
 8000f26:	001a      	movs	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f001 fcef 	bl	800290c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2e:	003b      	movs	r3, r7
 8000f30:	0018      	movs	r0, r3
 8000f32:	2318      	movs	r3, #24
 8000f34:	001a      	movs	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	f001 fce8 	bl	800290c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <SystemClock_Config+0xd8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <SystemClock_Config+0xdc>)
 8000f42:	401a      	ands	r2, r3
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <SystemClock_Config+0xd8>)
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	0109      	lsls	r1, r1, #4
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000f4e:	0021      	movs	r1, r4
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2218      	movs	r2, #24
 8000f54:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2201      	movs	r2, #1
 8000f5a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	0212      	lsls	r2, r2, #8
 8000f6e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fc87 	bl	800188c <HAL_RCC_OscConfig>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f82:	f000 f940 	bl	8001206 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	2118      	movs	r1, #24
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2100      	movs	r1, #0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 ffea 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000fb4:	f000 f927 	bl	8001206 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	02d2      	lsls	r2, r2, #11
 8000fc4:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f001 f9c9 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000fd2:	f000 f918 	bl	8001206 <Error_Handler>
  }
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b019      	add	sp, #100	; 0x64
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	ffffe7ff 	.word	0xffffe7ff

08000fe8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b091      	sub	sp, #68	; 0x44
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000fee:	2418      	movs	r4, #24
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	2328      	movs	r3, #40	; 0x28
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f001 fc87 	bl	800290c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	003b      	movs	r3, r7
 8001000:	0018      	movs	r0, r3
 8001002:	2318      	movs	r3, #24
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f001 fc80 	bl	800290c <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	015b      	lsls	r3, r3, #5
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff fe47 	bl	8000ca4 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001016:	2001      	movs	r0, #1
 8001018:	f7ff fe5a 	bl	8000cd0 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800101c:	003b      	movs	r3, r7
 800101e:	2220      	movs	r2, #32
 8001020:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001022:	003b      	movs	r3, r7
 8001024:	2202      	movs	r2, #2
 8001026:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	003b      	movs	r3, r7
 800102a:	2203      	movs	r2, #3
 800102c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800102e:	003b      	movs	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001034:	003b      	movs	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800103a:	003b      	movs	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	003a      	movs	r2, r7
 8001042:	23a0      	movs	r3, #160	; 0xa0
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f001 fb68 	bl	800271e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800104e:	003b      	movs	r3, r7
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001054:	003b      	movs	r3, r7
 8001056:	2202      	movs	r2, #2
 8001058:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	003b      	movs	r3, r7
 800105c:	2203      	movs	r2, #3
 800105e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001060:	003b      	movs	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001066:	003b      	movs	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800106c:	003b      	movs	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	003a      	movs	r2, r7
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f001 fb4f 	bl	800271e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001080:	003b      	movs	r3, r7
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001086:	003b      	movs	r3, r7
 8001088:	2202      	movs	r2, #2
 800108a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	003b      	movs	r3, r7
 800108e:	2203      	movs	r2, #3
 8001090:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001092:	003b      	movs	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001098:	003b      	movs	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800109e:	003b      	movs	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	003a      	movs	r2, r7
 80010a6:	23a0      	movs	r3, #160	; 0xa0
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f001 fb36 	bl	800271e <LL_GPIO_Init>

  /* SPI1 DMA Init */

  /* SPI1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMA_REQUEST_1);
 80010b2:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	2103      	movs	r1, #3
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff fbff 	bl	80008bc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 80010c0:	2210      	movs	r2, #16
 80010c2:	2103      	movs	r1, #3
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fa95 	bl	80005f4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	2103      	movs	r1, #3
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fb79 	bl	80007c8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 80010d6:	4b42      	ldr	r3, [pc, #264]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 80010d8:	2220      	movs	r2, #32
 80010da:	2103      	movs	r1, #3
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff fac5 	bl	800066c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80010e2:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	2103      	movs	r1, #3
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff fae1 	bl	80006b0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	2103      	movs	r1, #3
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff fafd 	bl	80006f4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4838      	ldr	r0, [pc, #224]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 8001100:	001a      	movs	r2, r3
 8001102:	2103      	movs	r1, #3
 8001104:	f7ff fb18 	bl	8000738 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4834      	ldr	r0, [pc, #208]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 800110e:	001a      	movs	r2, r3
 8001110:	2103      	movs	r1, #3
 8001112:	f7ff fb35 	bl	8000780 <LL_DMA_SetMemorySize>

  /* SPI1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMA_REQUEST_1);
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 8001118:	2201      	movs	r2, #1
 800111a:	2102      	movs	r1, #2
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fbcd 	bl	80008bc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 8001124:	2200      	movs	r2, #0
 8001126:	2102      	movs	r1, #2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fa63 	bl	80005f4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	482b      	ldr	r0, [pc, #172]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 8001134:	001a      	movs	r2, r3
 8001136:	2102      	movs	r1, #2
 8001138:	f7ff fb46 	bl	80007c8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_CIRCULAR);
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 800113e:	2220      	movs	r2, #32
 8001140:	2102      	movs	r1, #2
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fa92 	bl	800066c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff faae 	bl	80006b0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	2102      	movs	r1, #2
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff faca 	bl	80006f4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	481e      	ldr	r0, [pc, #120]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 8001166:	001a      	movs	r2, r3
 8001168:	2102      	movs	r1, #2
 800116a:	f7ff fae5 	bl	8000738 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <MX_SPI1_Init+0x1f8>)
 8001174:	001a      	movs	r2, r3
 8001176:	2102      	movs	r1, #2
 8001178:	f7ff fb02 	bl	8000780 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800117c:	0021      	movs	r1, r4
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2282      	movs	r2, #130	; 0x82
 8001188:	0052      	lsls	r2, r2, #1
 800118a:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2208      	movs	r2, #8
 80011ac:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2207      	movs	r2, #7
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <MX_SPI1_Init+0x1fc>)
 80011c4:	0019      	movs	r1, r3
 80011c6:	0010      	movs	r0, r2
 80011c8:	f001 fb26 	bl	8002818 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <MX_SPI1_Init+0x1fc>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fcb9 	bl	8000b48 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b011      	add	sp, #68	; 0x44
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40013000 	.word	0x40013000

080011e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fd2d 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 80011f2:	2100      	movs	r1, #0
 80011f4:	200a      	movs	r0, #10
 80011f6:	f7ff f971 	bl	80004dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80011fa:	200a      	movs	r0, #10
 80011fc:	f7ff f954 	bl	80004a8 <__NVIC_EnableIRQ>

}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120a:	b672      	cpsid	i
}
 800120c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800120e:	e7fe      	b.n	800120e <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_MspInit+0x24>)
 8001216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x24>)
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <HAL_MspInit+0x24>)
 8001222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_MspInit+0x24>)
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	0549      	lsls	r1, r1, #21
 800122a:	430a      	orrs	r2, r1
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <LL_DMA_IsActiveFlag_TC3>:
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	401a      	ands	r2, r3
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	429a      	cmp	r2, r3
 8001250:	d101      	bne.n	8001256 <LL_DMA_IsActiveFlag_TC3+0x1e>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_DMA_IsActiveFlag_TC3+0x20>
 8001256:	2300      	movs	r3, #0
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <LL_DMA_ClearFlag_GI2>:
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2210      	movs	r2, #16
 800126c:	605a      	str	r2, [r3, #4]
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}

08001276 <LL_DMA_ClearFlag_GI3>:
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	605a      	str	r2, [r3, #4]
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}

0800128e <LL_DMA_ClearFlag_TC2>:
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2220      	movs	r2, #32
 800129a:	605a      	str	r2, [r3, #4]
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LL_DMA_ClearFlag_TC3>:
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	605a      	str	r2, [r3, #4]
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LL_DMA_ClearFlag_HT2>:
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2240      	movs	r2, #64	; 0x40
 80012c8:	605a      	str	r2, [r3, #4]
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <LL_DMA_ClearFlag_HT3>:
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	00d2      	lsls	r2, r2, #3
 80012e0:	605a      	str	r2, [r3, #4]
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}

080012ea <LL_LPTIM_ClearFLAG_CMPM>:
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_CMPMCF);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	605a      	str	r2, [r3, #4]
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}

08001306 <LL_LPTIM_IsActiveFlag_CMPM>:
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_CMPM) == LPTIM_ISR_CMPM) ? 1UL : 0UL));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4013      	ands	r3, r2
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <LL_LPTIM_IsActiveFlag_CMPM+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_LPTIM_IsActiveFlag_CMPM+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}

08001328 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2202      	movs	r2, #2
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	605a      	str	r2, [r3, #4]
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2202      	movs	r2, #2
 8001352:	4013      	ands	r3, r2
 8001354:	2b02      	cmp	r3, #2
 8001356:	d101      	bne.n	800135c <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}

08001366 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800136a:	e7fe      	b.n	800136a <NMI_Handler+0x4>

0800136c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <HardFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f8fb 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	LL_DMA_ClearFlag_HT2(DMA1);
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <DMA1_Channel2_3_IRQHandler+0x50>)
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff ff8e 	bl	80012bc <LL_DMA_ClearFlag_HT2>
	LL_DMA_ClearFlag_GI2(DMA1);
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <DMA1_Channel2_3_IRQHandler+0x50>)
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff ff5c 	bl	8001260 <LL_DMA_ClearFlag_GI2>
	LL_DMA_ClearFlag_TC2(DMA1);
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <DMA1_Channel2_3_IRQHandler+0x50>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff ff6f 	bl	800128e <LL_DMA_ClearFlag_TC2>

	LL_DMA_ClearFlag_HT3(DMA1);
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <DMA1_Channel2_3_IRQHandler+0x50>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff ff8d 	bl	80012d2 <LL_DMA_ClearFlag_HT3>
	LL_DMA_ClearFlag_GI3(DMA1);
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <DMA1_Channel2_3_IRQHandler+0x50>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff ff5b 	bl	8001276 <LL_DMA_ClearFlag_GI3>

	if(LL_DMA_IsActiveFlag_TC3(DMA1) == SET)
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <DMA1_Channel2_3_IRQHandler+0x50>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7ff ff38 	bl	8001238 <LL_DMA_IsActiveFlag_TC3>
 80013c8:	0003      	movs	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d106      	bne.n	80013dc <DMA1_Channel2_3_IRQHandler+0x48>
	{
		spiFlag = SET;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <DMA1_Channel2_3_IRQHandler+0x54>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
		LL_DMA_ClearFlag_TC3(DMA1);
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <DMA1_Channel2_3_IRQHandler+0x50>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff ff64 	bl	80012a4 <LL_DMA_ClearFlag_TC3>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	40020000 	.word	0x40020000
 80013e8:	20000035 	.word	0x20000035

080013ec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
#ifdef AVOID_IRQHandler
  /* USER CODE END LPTIM1_IRQn 0 */
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
#endif

	if(LL_LPTIM_IsActiveFlag_CMPM(LPTIM1) == SET)
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <LPTIM1_IRQHandler+0x58>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff ff87 	bl	8001306 <LL_LPTIM_IsActiveFlag_CMPM>
 80013f8:	0003      	movs	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10c      	bne.n	8001418 <LPTIM1_IRQHandler+0x2c>
	{
		/* Set low level on MOSI pin */
		GPIOA->BSRR = LL_GPIO_PIN_7<<16;
 80013fe:	23a0      	movs	r3, #160	; 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	0412      	lsls	r2, r2, #16
 8001406:	619a      	str	r2, [r3, #24]

		/* Clear the LPTIM CMPM IT Flag */
		LL_LPTIM_ClearFLAG_CMPM(LPTIM1);
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <LPTIM1_IRQHandler+0x58>)
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ff6d 	bl	80012ea <LL_LPTIM_ClearFLAG_CMPM>

		/* Set the Wake UP Flag */
		forcePulseFlag = SET;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <LPTIM1_IRQHandler+0x5c>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
		/* Clear the Wake UP flag */
		forcePulseFlag = RESET;

	}
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001416:	e011      	b.n	800143c <LPTIM1_IRQHandler+0x50>
	else if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) == SET)
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <LPTIM1_IRQHandler+0x58>)
 800141a:	0018      	movs	r0, r3
 800141c:	f7ff ff92 	bl	8001344 <LL_LPTIM_IsActiveFlag_ARRM>
 8001420:	0003      	movs	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d10a      	bne.n	800143c <LPTIM1_IRQHandler+0x50>
		GPIOA->BSRR = LL_GPIO_PIN_7;
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	619a      	str	r2, [r3, #24]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <LPTIM1_IRQHandler+0x58>)
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff ff79 	bl	8001328 <LL_LPTIM_ClearFLAG_ARRM>
		forcePulseFlag = RESET;
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <LPTIM1_IRQHandler+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	40007c00 	.word	0x40007c00
 8001448:	20000034 	.word	0x20000034

0800144c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800145a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <LoopForever+0x6>)
    LDR R1, [R0]
 800145e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001460:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <LoopForever+0xa>)
    CMP R1, R2
 8001464:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001466:	d105      	bne.n	8001474 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800146a:	4913      	ldr	r1, [pc, #76]	; (80014b8 <LoopForever+0x12>)
    STR R1, [R0]
 800146c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800146e:	4813      	ldr	r0, [pc, #76]	; (80014bc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001470:	4913      	ldr	r1, [pc, #76]	; (80014c0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001472:	6001      	str	r1, [r0, #0]

08001474 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	4813      	ldr	r0, [pc, #76]	; (80014c4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001476:	4914      	ldr	r1, [pc, #80]	; (80014c8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <LoopForever+0x26>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800148c:	4c11      	ldr	r4, [pc, #68]	; (80014d4 <LoopForever+0x2e>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800149a:	f7ff ffd7 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f001 fa11 	bl	80028c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff fc2b 	bl	8000cfc <main>

080014a6 <LoopForever>:

LoopForever:
    b LoopForever
 80014a6:	e7fe      	b.n	80014a6 <LoopForever>
   ldr   r0, =_estack
 80014a8:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80014ac:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80014b0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80014b4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80014b8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80014bc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80014c0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80014cc:	08002968 	.word	0x08002968
  ldr r2, =_sbss
 80014d0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014d4:	20000048 	.word	0x20000048

080014d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_IRQHandler>
	...

080014dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_Init+0x3c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Init+0x3c>)
 80014ee:	2140      	movs	r1, #64	; 0x40
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 f811 	bl	800151c <HAL_InitTick>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d003      	beq.n	8001506 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	e001      	b.n	800150a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001506:	f7ff fe83 	bl	8001210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40022000 	.word	0x40022000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0x5c>)
 8001526:	681c      	ldr	r4, [r3, #0]
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_InitTick+0x60>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	0019      	movs	r1, r3
 800152e:	23fa      	movs	r3, #250	; 0xfa
 8001530:	0098      	lsls	r0, r3, #2
 8001532:	f7fe fde9 	bl	8000108 <__udivsi3>
 8001536:	0003      	movs	r3, r0
 8001538:	0019      	movs	r1, r3
 800153a:	0020      	movs	r0, r4
 800153c:	f7fe fde4 	bl	8000108 <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	0018      	movs	r0, r3
 8001544:	f000 f8e1 	bl	800170a <HAL_SYSTICK_Config>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d001      	beq.n	8001550 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e00f      	b.n	8001570 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d80b      	bhi.n	800156e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	2301      	movs	r3, #1
 800155a:	425b      	negs	r3, r3
 800155c:	2200      	movs	r2, #0
 800155e:	0018      	movs	r0, r3
 8001560:	f000 f8be 	bl	80016e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_InitTick+0x64>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b003      	add	sp, #12
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	2000000c 	.word	0x2000000c
 800157c:	20000014 	.word	0x20000014
 8001580:	20000010 	.word	0x20000010

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x1c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	001a      	movs	r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x20>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	18d2      	adds	r2, r2, r3
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_IncTick+0x20>)
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	20000014 	.word	0x20000014
 80015a4:	20000044 	.word	0x20000044

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <HAL_GetTick+0x10>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000044 	.word	0x20000044

080015bc <__NVIC_SetPriority>:
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b7f      	cmp	r3, #127	; 0x7f
 80015d0:	d828      	bhi.n	8001624 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <__NVIC_SetPriority+0xd4>)
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	33c0      	adds	r3, #192	; 0xc0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	589b      	ldr	r3, [r3, r2]
 80015e2:	1dfa      	adds	r2, r7, #7
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	0011      	movs	r1, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	400a      	ands	r2, r1
 80015ec:	00d2      	lsls	r2, r2, #3
 80015ee:	21ff      	movs	r1, #255	; 0xff
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	401a      	ands	r2, r3
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	2303      	movs	r3, #3
 800160a:	4003      	ands	r3, r0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <__NVIC_SetPriority+0xd4>)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	430a      	orrs	r2, r1
 800161c:	33c0      	adds	r3, #192	; 0xc0
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	501a      	str	r2, [r3, r0]
}
 8001622:	e031      	b.n	8001688 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <__NVIC_SetPriority+0xd8>)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0019      	movs	r1, r3
 800162c:	230f      	movs	r3, #15
 800162e:	400b      	ands	r3, r1
 8001630:	3b08      	subs	r3, #8
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3306      	adds	r3, #6
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	3304      	adds	r3, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1dfa      	adds	r2, r7, #7
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0011      	movs	r1, r2
 8001644:	2203      	movs	r2, #3
 8001646:	400a      	ands	r2, r1
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	401a      	ands	r2, r3
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	2303      	movs	r3, #3
 8001666:	4003      	ands	r3, r0
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	001c      	movs	r4, r3
 8001674:	230f      	movs	r3, #15
 8001676:	4023      	ands	r3, r4
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	430a      	orrs	r2, r1
 800167e:	3306      	adds	r3, #6
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	18c3      	adds	r3, r0, r3
 8001684:	3304      	adds	r3, #4
 8001686:	601a      	str	r2, [r3, #0]
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b003      	add	sp, #12
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	045b      	lsls	r3, r3, #17
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d301      	bcc.n	80016b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ac:	2301      	movs	r3, #1
 80016ae:	e010      	b.n	80016d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <SysTick_Config+0x44>)
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	3a01      	subs	r2, #1
 80016b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b8:	2301      	movs	r3, #1
 80016ba:	425b      	negs	r3, r3
 80016bc:	2103      	movs	r1, #3
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff ff7c 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x44>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x44>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	210f      	movs	r1, #15
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	1c02      	adds	r2, r0, #0
 80016f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ffbf 	bl	8001698 <SysTick_Config>
 800171a:	0003      	movs	r3, r0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	000a      	movs	r2, r1
 800172e:	1cfb      	adds	r3, r7, #3
 8001730:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <HAL_PWR_EnterSLEEPMode+0x40>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800175e:	491b      	ldr	r1, [pc, #108]	; (80017cc <HAL_PWR_EnterSLEEPMode+0xa8>)
 8001760:	400a      	ands	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2203      	movs	r2, #3
 800176e:	4393      	bics	r3, r2
 8001770:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4313      	orrs	r3, r2
 8001778:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001786:	2104      	movs	r1, #4
 8001788:	438a      	bics	r2, r1
 800178a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800178c:	1cfb      	adds	r3, r7, #3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001794:	bf30      	wfi
 8001796:	e002      	b.n	800179e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001798:	bf40      	sev
    __WFE();
 800179a:	bf20      	wfe
    __WFE();
 800179c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_PWR_EnterSLEEPMode+0x94>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0089      	lsls	r1, r1, #2
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80017b8:	46c0      	nop			; (mov r8, r8)

}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b006      	add	sp, #24
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40007000 	.word	0x40007000
 80017c8:	40010000 	.word	0x40010000
 80017cc:	fffffdff 	.word	0xfffffdff
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	000a      	movs	r2, r1
 80017de:	1cfb      	adds	r3, r7, #3
 80017e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_PWR_EnterSTOPMode+0xa8>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_PWR_EnterSTOPMode+0xac>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2201      	movs	r2, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <HAL_PWR_EnterSTOPMode+0x40>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_PWR_EnterSTOPMode+0xa8>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_PWR_EnterSTOPMode+0xa8>)
 800180e:	491d      	ldr	r1, [pc, #116]	; (8001884 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2203      	movs	r2, #3
 800181e:	4393      	bics	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_PWR_EnterSTOPMode+0xa8>)
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001836:	2104      	movs	r1, #4
 8001838:	430a      	orrs	r2, r1
 800183a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800183c:	1cfb      	adds	r3, r7, #3
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001844:	bf30      	wfi
 8001846:	e002      	b.n	800184e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001848:	bf40      	sev
    __WFE();
 800184a:	bf20      	wfe
    __WFE();
 800184c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001854:	2104      	movs	r1, #4
 8001856:	438a      	bics	r2, r1
 8001858:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <HAL_PWR_EnterSTOPMode+0xa0>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_PWR_EnterSTOPMode+0xa8>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0089      	lsls	r1, r1, #2
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
  }
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b006      	add	sp, #24
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40007000 	.word	0x40007000
 8001880:	40010000 	.word	0x40010000
 8001884:	fffffdff 	.word	0xfffffdff
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	f000 fb6c 	bl	8001f78 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a0:	4bc8      	ldr	r3, [pc, #800]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	220c      	movs	r2, #12
 80018a6:	4013      	ands	r3, r2
 80018a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018aa:	4bc6      	ldr	r3, [pc, #792]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	d100      	bne.n	80018c2 <HAL_RCC_OscConfig+0x36>
 80018c0:	e07d      	b.n	80019be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d007      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x68>
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	025b      	lsls	r3, r3, #9
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10d      	bne.n	80018f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	4bba      	ldr	r3, [pc, #744]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d100      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5a>
 80018e4:	e06a      	b.n	80019bc <HAL_RCC_OscConfig+0x130>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d166      	bne.n	80019bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f000 fb42 	bl	8001f78 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	025b      	lsls	r3, r3, #9
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x84>
 8001900:	4bb0      	ldr	r3, [pc, #704]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4baf      	ldr	r3, [pc, #700]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0249      	lsls	r1, r1, #9
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e027      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	23a0      	movs	r3, #160	; 0xa0
 8001916:	02db      	lsls	r3, r3, #11
 8001918:	429a      	cmp	r2, r3
 800191a:	d10e      	bne.n	800193a <HAL_RCC_OscConfig+0xae>
 800191c:	4ba9      	ldr	r3, [pc, #676]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4ba8      	ldr	r3, [pc, #672]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	02c9      	lsls	r1, r1, #11
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4ba6      	ldr	r3, [pc, #664]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4ba5      	ldr	r3, [pc, #660]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0249      	lsls	r1, r1, #9
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e012      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 800193a:	4ba2      	ldr	r3, [pc, #648]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4ba1      	ldr	r3, [pc, #644]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001940:	49a1      	ldr	r1, [pc, #644]	; (8001bc8 <HAL_RCC_OscConfig+0x33c>)
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	4b9f      	ldr	r3, [pc, #636]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	4013      	ands	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4b9b      	ldr	r3, [pc, #620]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b9a      	ldr	r3, [pc, #616]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 800195a:	499c      	ldr	r1, [pc, #624]	; (8001bcc <HAL_RCC_OscConfig+0x340>)
 800195c:	400a      	ands	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d014      	beq.n	8001992 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fe1e 	bl	80015a8 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fe19 	bl	80015a8 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2f9      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001984:	4b8f      	ldr	r3, [pc, #572]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0xe6>
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fe09 	bl	80015a8 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fe04 	bl	80015a8 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e2e4      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ae:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	029b      	lsls	r3, r3, #10
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x110>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x13e>
 80019c8:	e099      	b.n	8001afe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	2220      	movs	r2, #32
 80019d4:	4013      	ands	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80019d8:	4b7a      	ldr	r3, [pc, #488]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 80019de:	2120      	movs	r1, #32
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	2220      	movs	r2, #32
 80019e8:	4393      	bics	r3, r2
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d13e      	bne.n	8001a76 <HAL_RCC_OscConfig+0x1ea>
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d13b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80019fe:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d004      	beq.n	8001a12 <HAL_RCC_OscConfig+0x186>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e2b2      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a6e      	ldr	r2, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x344>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	021a      	lsls	r2, r3, #8
 8001a22:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2209      	movs	r2, #9
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3a:	f000 fbeb 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8001a3e:	0001      	movs	r1, r0
 8001a40:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	220f      	movs	r2, #15
 8001a48:	4013      	ands	r3, r2
 8001a4a:	4a62      	ldr	r2, [pc, #392]	; (8001bd4 <HAL_RCC_OscConfig+0x348>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	000a      	movs	r2, r1
 8001a50:	40da      	lsrs	r2, r3
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x34c>)
 8001a54:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_RCC_OscConfig+0x350>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2513      	movs	r5, #19
 8001a5c:	197c      	adds	r4, r7, r5
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff fd5c 	bl	800151c <HAL_InitTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a68:	197b      	adds	r3, r7, r5
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d046      	beq.n	8001afe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001a70:	197b      	adds	r3, r7, r5
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	e280      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d027      	beq.n	8001acc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a7c:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2209      	movs	r2, #9
 8001a82:	4393      	bics	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fd8b 	bl	80015a8 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fd86 	bl	80015a8 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e266      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0f1      	beq.n	8001a98 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_RCC_OscConfig+0x344>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	021a      	lsls	r2, r3, #8
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	e018      	b.n	8001afe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001acc:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fd66 	bl	80015a8 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fd61 	bl	80015a8 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e241      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2204      	movs	r2, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f1      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2210      	movs	r2, #16
 8001b04:	4013      	ands	r3, r2
 8001b06:	d100      	bne.n	8001b0a <HAL_RCC_OscConfig+0x27e>
 8001b08:	e0a1      	b.n	8001c4e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d140      	bne.n	8001b92 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b10:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x29c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e227      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <HAL_RCC_OscConfig+0x354>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1a      	ldr	r2, [r3, #32]
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	0a19      	lsrs	r1, r3, #8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	061a      	lsls	r2, r3, #24
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	0b5b      	lsrs	r3, r3, #13
 8001b56:	3301      	adds	r3, #1
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	0212      	lsls	r2, r2, #8
 8001b5c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	210f      	movs	r1, #15
 8001b66:	400b      	ands	r3, r1
 8001b68:	491a      	ldr	r1, [pc, #104]	; (8001bd4 <HAL_RCC_OscConfig+0x348>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_RCC_OscConfig+0x34c>)
 8001b70:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_RCC_OscConfig+0x350>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2513      	movs	r5, #19
 8001b78:	197c      	adds	r4, r7, r5
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7ff fcce 	bl	800151c <HAL_InitTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b84:	197b      	adds	r3, r7, r5
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d060      	beq.n	8001c4e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001b8c:	197b      	adds	r3, r7, r5
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	e1f2      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03f      	beq.n	8001c1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_OscConfig+0x338>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0049      	lsls	r1, r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fcfe 	bl	80015a8 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fcf9 	bl	80015a8 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d911      	bls.n	8001be4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1d9      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	fffeffff 	.word	0xfffeffff
 8001bcc:	fffbffff 	.word	0xfffbffff
 8001bd0:	ffffe0ff 	.word	0xffffe0ff
 8001bd4:	0800293c 	.word	0x0800293c
 8001bd8:	2000000c 	.word	0x2000000c
 8001bdc:	20000010 	.word	0x20000010
 8001be0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001be4:	4bc9      	ldr	r3, [pc, #804]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0e0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf0:	4bc6      	ldr	r3, [pc, #792]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4ac6      	ldr	r2, [pc, #792]	; (8001f10 <HAL_RCC_OscConfig+0x684>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	4bc3      	ldr	r3, [pc, #780]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c04:	4bc1      	ldr	r3, [pc, #772]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	0a19      	lsrs	r1, r3, #8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	061a      	lsls	r2, r3, #24
 8001c12:	4bbe      	ldr	r3, [pc, #760]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	e019      	b.n	8001c4e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c1a:	4bbc      	ldr	r3, [pc, #752]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4bbb      	ldr	r3, [pc, #748]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c20:	49bc      	ldr	r1, [pc, #752]	; (8001f14 <HAL_RCC_OscConfig+0x688>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff fcbf 	bl	80015a8 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c30:	f7ff fcba 	bl	80015a8 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e19a      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c42:	4bb2      	ldr	r3, [pc, #712]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2208      	movs	r2, #8
 8001c54:	4013      	ands	r3, r2
 8001c56:	d036      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4baa      	ldr	r3, [pc, #680]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c64:	4ba9      	ldr	r3, [pc, #676]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fc9c 	bl	80015a8 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c76:	f7ff fc97 	bl	80015a8 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e177      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c88:	4ba0      	ldr	r3, [pc, #640]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d0f1      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3ea>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b9d      	ldr	r3, [pc, #628]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c98:	4b9c      	ldr	r3, [pc, #624]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fc82 	bl	80015a8 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff fc7d 	bl	80015a8 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e15d      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cbc:	4b93      	ldr	r3, [pc, #588]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d1f1      	bne.n	8001caa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x446>
 8001cd0:	e0ae      	b.n	8001e30 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2023      	movs	r0, #35	; 0x23
 8001cd4:	183b      	adds	r3, r7, r0
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b8c      	ldr	r3, [pc, #560]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cea:	4b88      	ldr	r3, [pc, #544]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0549      	lsls	r1, r1, #21
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b87      	ldr	r3, [pc, #540]	; (8001f18 <HAL_RCC_OscConfig+0x68c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	d11a      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d06:	4b84      	ldr	r3, [pc, #528]	; (8001f18 <HAL_RCC_OscConfig+0x68c>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b83      	ldr	r3, [pc, #524]	; (8001f18 <HAL_RCC_OscConfig+0x68c>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0049      	lsls	r1, r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d14:	f7ff fc48 	bl	80015a8 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff fc43 	bl	80015a8 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	; 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e123      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <HAL_RCC_OscConfig+0x68c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4cc>
 8001d48:	4b70      	ldr	r3, [pc, #448]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0049      	lsls	r1, r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	651a      	str	r2, [r3, #80]	; 0x50
 8001d56:	e031      	b.n	8001dbc <HAL_RCC_OscConfig+0x530>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4ee>
 8001d60:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d64:	4b69      	ldr	r3, [pc, #420]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d66:	496b      	ldr	r1, [pc, #428]	; (8001f14 <HAL_RCC_OscConfig+0x688>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d6c:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d70:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d72:	496a      	ldr	r1, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x690>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	651a      	str	r2, [r3, #80]	; 0x50
 8001d78:	e020      	b.n	8001dbc <HAL_RCC_OscConfig+0x530>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	23a0      	movs	r3, #160	; 0xa0
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d10e      	bne.n	8001da4 <HAL_RCC_OscConfig+0x518>
 8001d86:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d8a:	4b60      	ldr	r3, [pc, #384]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	00c9      	lsls	r1, r1, #3
 8001d90:	430a      	orrs	r2, r1
 8001d92:	651a      	str	r2, [r3, #80]	; 0x50
 8001d94:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d98:	4b5c      	ldr	r3, [pc, #368]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	0049      	lsls	r1, r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0x530>
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da8:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001daa:	495a      	ldr	r1, [pc, #360]	; (8001f14 <HAL_RCC_OscConfig+0x688>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	651a      	str	r2, [r3, #80]	; 0x50
 8001db0:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db4:	4b55      	ldr	r3, [pc, #340]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001db6:	4959      	ldr	r1, [pc, #356]	; (8001f1c <HAL_RCC_OscConfig+0x690>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d015      	beq.n	8001df0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fbf0 	bl	80015a8 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff fbeb 	bl	80015a8 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_RCC_OscConfig+0x694>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0ca      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001de2:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d0ef      	beq.n	8001dce <HAL_RCC_OscConfig+0x542>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fbda 	bl	80015a8 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7ff fbd5 	bl	80015a8 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <HAL_RCC_OscConfig+0x694>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0b4      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d1ef      	bne.n	8001dfa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e1a:	2323      	movs	r3, #35	; 0x23
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e28:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e2a:	493e      	ldr	r1, [pc, #248]	; (8001f24 <HAL_RCC_OscConfig+0x698>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5ae>
 8001e38:	e09d      	b.n	8001f76 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b0c      	cmp	r3, #12
 8001e3e:	d100      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5b6>
 8001e40:	e076      	b.n	8001f30 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d145      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e50:	4935      	ldr	r1, [pc, #212]	; (8001f28 <HAL_RCC_OscConfig+0x69c>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff fba7 	bl	80015a8 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff fba2 	bl	80015a8 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e082      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	049b      	lsls	r3, r3, #18
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x6a0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	431a      	orrs	r2, r3
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0449      	lsls	r1, r1, #17
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fb7c 	bl	80015a8 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff fb77 	bl	80015a8 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e057      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	049b      	lsls	r3, r3, #18
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x62a>
 8001ed4:	e04f      	b.n	8001f76 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001edc:	4912      	ldr	r1, [pc, #72]	; (8001f28 <HAL_RCC_OscConfig+0x69c>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fb61 	bl	80015a8 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff fb5c 	bl	80015a8 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e03c      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_RCC_OscConfig+0x680>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	049b      	lsls	r3, r3, #18
 8001f06:	4013      	ands	r3, r2
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x660>
 8001f0a:	e034      	b.n	8001f76 <HAL_RCC_OscConfig+0x6ea>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	ffff1fff 	.word	0xffff1fff
 8001f14:	fffffeff 	.word	0xfffffeff
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	fffffbff 	.word	0xfffffbff
 8001f20:	00001388 	.word	0x00001388
 8001f24:	efffffff 	.word	0xefffffff
 8001f28:	feffffff 	.word	0xfeffffff
 8001f2c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e01d      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_RCC_OscConfig+0x6f4>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	401a      	ands	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d10f      	bne.n	8001f72 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	23f0      	movs	r3, #240	; 0xf0
 8001f56:	039b      	lsls	r3, r3, #14
 8001f58:	401a      	ands	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	23c0      	movs	r3, #192	; 0xc0
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b00a      	add	sp, #40	; 0x28
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e128      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b96      	ldr	r3, [pc, #600]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d91e      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b93      	ldr	r3, [pc, #588]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	4b90      	ldr	r3, [pc, #576]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff faf6 	bl	80015a8 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc2:	f7ff faf1 	bl	80015a8 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4a8a      	ldr	r2, [pc, #552]	; (80021f8 <HAL_RCC_ClockConfig+0x274>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e109      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b87      	ldr	r3, [pc, #540]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fee:	4b83      	ldr	r3, [pc, #524]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	22f0      	movs	r2, #240	; 0xf0
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2201      	movs	r2, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCC_ClockConfig+0x8a>
 800200c:	e089      	b.n	8002122 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002016:	4b79      	ldr	r3, [pc, #484]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	4013      	ands	r3, r2
 8002020:	d120      	bne.n	8002064 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0e1      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800202e:	4b73      	ldr	r3, [pc, #460]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	049b      	lsls	r3, r3, #18
 8002036:	4013      	ands	r3, r2
 8002038:	d114      	bne.n	8002064 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0d5      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d106      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2204      	movs	r2, #4
 800204c:	4013      	ands	r3, r2
 800204e:	d109      	bne.n	8002064 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0ca      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002054:	4b69      	ldr	r3, [pc, #420]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0c2      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002064:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2203      	movs	r2, #3
 800206a:	4393      	bics	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4b62      	ldr	r3, [pc, #392]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7ff fa96 	bl	80015a8 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d111      	bne.n	80020ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002088:	e009      	b.n	800209e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208a:	f7ff fa8d 	bl	80015a8 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x274>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e0a5      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	220c      	movs	r2, #12
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d1ef      	bne.n	800208a <HAL_RCC_ClockConfig+0x106>
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d111      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	e009      	b.n	80020ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b6:	f7ff fa77 	bl	80015a8 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x274>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e08f      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ca:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	220c      	movs	r2, #12
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d1ef      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x132>
 80020d6:	e024      	b.n	8002122 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d11b      	bne.n	8002118 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e0:	e009      	b.n	80020f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e2:	f7ff fa61 	bl	80015a8 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	4a42      	ldr	r2, [pc, #264]	; (80021f8 <HAL_RCC_ClockConfig+0x274>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e079      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	220c      	movs	r2, #12
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d1ef      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x15e>
 8002102:	e00e      	b.n	8002122 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7ff fa50 	bl	80015a8 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	4a3a      	ldr	r2, [pc, #232]	; (80021f8 <HAL_RCC_ClockConfig+0x274>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e068      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002118:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d21e      	bcs.n	800216e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002130:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002142:	f7ff fa31 	bl	80015a8 <HAL_GetTick>
 8002146:	0003      	movs	r3, r0
 8002148:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	e009      	b.n	8002160 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7ff fa2c 	bl	80015a8 <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <HAL_RCC_ClockConfig+0x274>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e044      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_ClockConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d1ee      	bne.n	800214c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	4013      	ands	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x27c>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2208      	movs	r2, #8
 8002192:	4013      	ands	r3, r2
 8002194:	d00a      	beq.n	80021ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_RCC_ClockConfig+0x280>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00da      	lsls	r2, r3, #3
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ac:	f000 f832 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021b0:	0001      	movs	r1, r0
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x278>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	220f      	movs	r2, #15
 80021ba:	4013      	ands	r3, r2
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_RCC_ClockConfig+0x284>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	000a      	movs	r2, r1
 80021c2:	40da      	lsrs	r2, r3
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_ClockConfig+0x288>)
 80021c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_ClockConfig+0x28c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	250b      	movs	r5, #11
 80021ce:	197c      	adds	r4, r7, r5
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff f9a3 	bl	800151c <HAL_InitTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80021da:	197b      	adds	r3, r7, r5
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80021e2:	197b      	adds	r3, r7, r5
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	e000      	b.n	80021ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b004      	add	sp, #16
 80021f0:	bdb0      	pop	{r4, r5, r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	40022000 	.word	0x40022000
 80021f8:	00001388 	.word	0x00001388
 80021fc:	40021000 	.word	0x40021000
 8002200:	fffff8ff 	.word	0xfffff8ff
 8002204:	ffffc7ff 	.word	0xffffc7ff
 8002208:	0800293c 	.word	0x0800293c
 800220c:	2000000c 	.word	0x2000000c
 8002210:	20000010 	.word	0x20000010

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800221a:	4b4c      	ldr	r3, [pc, #304]	; (800234c <HAL_RCC_GetSysClockFreq+0x138>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002222:	230c      	movs	r3, #12
 8002224:	4013      	ands	r3, r2
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d014      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 800222a:	d900      	bls.n	800222e <HAL_RCC_GetSysClockFreq+0x1a>
 800222c:	e07b      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x112>
 800222e:	2b04      	cmp	r3, #4
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x24>
 8002232:	2b08      	cmp	r3, #8
 8002234:	d00b      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x3a>
 8002236:	e076      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002238:	4b44      	ldr	r3, [pc, #272]	; (800234c <HAL_RCC_GetSysClockFreq+0x138>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	4013      	ands	r3, r2
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002246:	e07c      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002248:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCC_GetSysClockFreq+0x140>)
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800224c:	e079      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <HAL_RCC_GetSysClockFreq+0x144>)
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002252:	e076      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	0c9a      	lsrs	r2, r3, #18
 8002258:	230f      	movs	r3, #15
 800225a:	401a      	ands	r2, r3
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_GetSysClockFreq+0x148>)
 800225e:	5c9b      	ldrb	r3, [r3, r2]
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	0d9a      	lsrs	r2, r3, #22
 8002266:	2303      	movs	r3, #3
 8002268:	4013      	ands	r3, r2
 800226a:	3301      	adds	r3, #1
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <HAL_RCC_GetSysClockFreq+0x138>)
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	025b      	lsls	r3, r3, #9
 8002276:	4013      	ands	r3, r2
 8002278:	d01a      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	4a35      	ldr	r2, [pc, #212]	; (8002358 <HAL_RCC_GetSysClockFreq+0x144>)
 8002284:	2300      	movs	r3, #0
 8002286:	69b8      	ldr	r0, [r7, #24]
 8002288:	69f9      	ldr	r1, [r7, #28]
 800228a:	f7fd ffe9 	bl	8000260 <__aeabi_lmul>
 800228e:	0002      	movs	r2, r0
 8002290:	000b      	movs	r3, r1
 8002292:	0010      	movs	r0, r2
 8002294:	0019      	movs	r1, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f7fd ffbd 	bl	8000220 <__aeabi_uldivmod>
 80022a6:	0002      	movs	r2, r0
 80022a8:	000b      	movs	r3, r1
 80022aa:	0013      	movs	r3, r2
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
 80022ae:	e037      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022b0:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_RCC_GetSysClockFreq+0x138>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	4013      	ands	r3, r2
 80022b8:	d01a      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4a23      	ldr	r2, [pc, #140]	; (8002350 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022c4:	2300      	movs	r3, #0
 80022c6:	68b8      	ldr	r0, [r7, #8]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	f7fd ffc9 	bl	8000260 <__aeabi_lmul>
 80022ce:	0002      	movs	r2, r0
 80022d0:	000b      	movs	r3, r1
 80022d2:	0010      	movs	r0, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f7fd ff9d 	bl	8000220 <__aeabi_uldivmod>
 80022e6:	0002      	movs	r2, r0
 80022e8:	000b      	movs	r3, r1
 80022ea:	0013      	movs	r3, r2
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
 80022ee:	e017      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	0018      	movs	r0, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	0019      	movs	r1, r3
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_RCC_GetSysClockFreq+0x140>)
 80022fa:	2300      	movs	r3, #0
 80022fc:	f7fd ffb0 	bl	8000260 <__aeabi_lmul>
 8002300:	0002      	movs	r2, r0
 8002302:	000b      	movs	r3, r1
 8002304:	0010      	movs	r0, r2
 8002306:	0019      	movs	r1, r3
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	001c      	movs	r4, r3
 800230c:	2300      	movs	r3, #0
 800230e:	001d      	movs	r5, r3
 8002310:	0022      	movs	r2, r4
 8002312:	002b      	movs	r3, r5
 8002314:	f7fd ff84 	bl	8000220 <__aeabi_uldivmod>
 8002318:	0002      	movs	r2, r0
 800231a:	000b      	movs	r3, r1
 800231c:	0013      	movs	r3, r2
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002324:	e00d      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_GetSysClockFreq+0x138>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0b5b      	lsrs	r3, r3, #13
 800232c:	2207      	movs	r2, #7
 800232e:	4013      	ands	r3, r2
 8002330:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	3301      	adds	r3, #1
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	409a      	lsls	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002340:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b00e      	add	sp, #56	; 0x38
 800234a:	bdb0      	pop	{r4, r5, r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	003d0900 	.word	0x003d0900
 8002354:	00f42400 	.word	0x00f42400
 8002358:	007a1200 	.word	0x007a1200
 800235c:	0800294c 	.word	0x0800294c

08002360 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002368:	2017      	movs	r0, #23
 800236a:	183b      	adds	r3, r7, r0
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	4013      	ands	r3, r2
 8002378:	d100      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800237a:	e0c2      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237c:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800237e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	055b      	lsls	r3, r3, #21
 8002384:	4013      	ands	r3, r2
 8002386:	d109      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b7e      	ldr	r3, [pc, #504]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800238a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238c:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	0549      	lsls	r1, r1, #21
 8002392:	430a      	orrs	r2, r1
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002396:	183b      	adds	r3, r7, r0
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	d11a      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a8:	4b77      	ldr	r3, [pc, #476]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff f8f7 	bl	80015a8 <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	e008      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7ff f8f2 	bl	80015a8 <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0d4      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80023de:	4b69      	ldr	r3, [pc, #420]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	039b      	lsls	r3, r3, #14
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	23c0      	movs	r3, #192	; 0xc0
 80023f0:	039b      	lsls	r3, r3, #14
 80023f2:	4013      	ands	r3, r2
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d013      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	23c0      	movs	r3, #192	; 0xc0
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	401a      	ands	r2, r3
 8002404:	23c0      	movs	r3, #192	; 0xc0
 8002406:	029b      	lsls	r3, r3, #10
 8002408:	429a      	cmp	r2, r3
 800240a:	d10a      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800240c:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	401a      	ands	r2, r3
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	029b      	lsls	r3, r3, #10
 800241a:	429a      	cmp	r2, r3
 800241c:	d101      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0ac      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002426:	23c0      	movs	r3, #192	; 0xc0
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	4013      	ands	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d03b      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	23c0      	movs	r3, #192	; 0xc0
 800243a:	029b      	lsls	r3, r3, #10
 800243c:	4013      	ands	r3, r2
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d033      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2220      	movs	r2, #32
 800244a:	4013      	ands	r3, r2
 800244c:	d02e      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800244e:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002452:	4a4e      	ldr	r2, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002458:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800245a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800245c:	4b49      	ldr	r3, [pc, #292]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0309      	lsls	r1, r1, #12
 8002462:	430a      	orrs	r2, r1
 8002464:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800246a:	4b46      	ldr	r3, [pc, #280]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800246c:	4948      	ldr	r1, [pc, #288]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800246e:	400a      	ands	r2, r1
 8002470:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002472:	4b44      	ldr	r3, [pc, #272]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4013      	ands	r3, r2
 8002480:	d014      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff f891 	bl	80015a8 <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800248a:	e009      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7ff f88c 	bl	80015a8 <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	4a3f      	ldr	r2, [pc, #252]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e06d      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024a0:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d0ef      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	029b      	lsls	r3, r3, #10
 80024b4:	401a      	ands	r2, r3
 80024b6:	23c0      	movs	r3, #192	; 0xc0
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a35      	ldr	r2, [pc, #212]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	23c0      	movs	r3, #192	; 0xc0
 80024ce:	039b      	lsls	r3, r3, #14
 80024d0:	401a      	ands	r2, r3
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	23c0      	movs	r3, #192	; 0xc0
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	401a      	ands	r2, r3
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ec:	2317      	movs	r3, #23
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024fc:	4927      	ldr	r1, [pc, #156]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80024fe:	400a      	ands	r2, r1
 8002500:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	220c      	movs	r2, #12
 8002512:	4393      	bics	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800251c:	430a      	orrs	r2, r1
 800251e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800253a:	430a      	orrs	r2, r1
 800253c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2208      	movs	r2, #8
 8002544:	4013      	ands	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002558:	430a      	orrs	r2, r1
 800255a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	4013      	ands	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002576:	430a      	orrs	r2, r1
 8002578:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b006      	add	sp, #24
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	fffcffff 	.word	0xfffcffff
 8002590:	fff7ffff 	.word	0xfff7ffff
 8002594:	00001388 	.word	0x00001388
 8002598:	ffcfffff 	.word	0xffcfffff
 800259c:	efffffff 	.word	0xefffffff
 80025a0:	fffff3ff 	.word	0xfffff3ff
 80025a4:	ffffcfff 	.word	0xffffcfff
 80025a8:	fff3ffff 	.word	0xfff3ffff

080025ac <LL_GPIO_SetPinMode>:
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	435b      	muls	r3, r3
 80025c0:	001a      	movs	r2, r3
 80025c2:	0013      	movs	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	43db      	mvns	r3, r3
 80025ca:	400b      	ands	r3, r1
 80025cc:	001a      	movs	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	435b      	muls	r3, r3
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	434b      	muls	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	43d2      	mvns	r2, r2
 80025f8:	401a      	ands	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	434b      	muls	r3, r1
 8002600:	431a      	orrs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	605a      	str	r2, [r3, #4]
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b004      	add	sp, #16
 800260c:	bd80      	pop	{r7, pc}

0800260e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	435b      	muls	r3, r3
 8002622:	001a      	movs	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	189b      	adds	r3, r3, r2
 800262a:	43db      	mvns	r3, r3
 800262c:	400b      	ands	r3, r1
 800262e:	001a      	movs	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	435b      	muls	r3, r3
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	434b      	muls	r3, r1
 8002638:	431a      	orrs	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	609a      	str	r2, [r3, #8]
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}

08002646 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68d9      	ldr	r1, [r3, #12]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	435b      	muls	r3, r3
 800265a:	001a      	movs	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	189b      	adds	r3, r3, r2
 8002662:	43db      	mvns	r3, r3
 8002664:	400b      	ands	r3, r1
 8002666:	001a      	movs	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	435b      	muls	r3, r3
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	434b      	muls	r3, r1
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	60da      	str	r2, [r3, #12]
}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}

0800267e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a19      	ldr	r1, [r3, #32]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	435b      	muls	r3, r3
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	4353      	muls	r3, r2
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	435a      	muls	r2, r3
 800269a:	0013      	movs	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	43db      	mvns	r3, r3
 80026a2:	400b      	ands	r3, r1
 80026a4:	001a      	movs	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	435b      	muls	r3, r3
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	434b      	muls	r3, r1
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	434b      	muls	r3, r1
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	434b      	muls	r3, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b004      	add	sp, #16
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	0a12      	lsrs	r2, r2, #8
 80026dc:	4353      	muls	r3, r2
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	0a12      	lsrs	r2, r2, #8
 80026e2:	4353      	muls	r3, r2
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	0a12      	lsrs	r2, r2, #8
 80026e8:	435a      	muls	r2, r3
 80026ea:	0013      	movs	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	43db      	mvns	r3, r3
 80026f2:	400b      	ands	r3, r1
 80026f4:	001a      	movs	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	0a09      	lsrs	r1, r1, #8
 80026fe:	434b      	muls	r3, r1
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	0a09      	lsrs	r1, r1, #8
 8002704:	434b      	muls	r3, r1
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	0a09      	lsrs	r1, r1, #8
 800270a:	434b      	muls	r3, r1
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	434b      	muls	r3, r1
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b004      	add	sp, #16
 800271c:	bd80      	pop	{r7, pc}

0800271e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002730:	e048      	b.n	80027c4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2101      	movs	r1, #1
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4091      	lsls	r1, r2
 800273c:	000a      	movs	r2, r1
 800273e:	4013      	ands	r3, r2
 8002740:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d03a      	beq.n	80027be <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d003      	beq.n	8002758 <LL_GPIO_Init+0x3a>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d10e      	bne.n	8002776 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff ff54 	bl	800260e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff ff37 	bl	80025e4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff ff61 	bl	8002646 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d111      	bne.n	80027b0 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d807      	bhi.n	80027a2 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f7ff ff6f 	bl	800267e <LL_GPIO_SetAFPin_0_7>
 80027a0:	e006      	b.n	80027b0 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff ff8a 	bl	80026c4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff fef7 	bl	80025ac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	40da      	lsrs	r2, r3
 80027cc:	1e13      	subs	r3, r2, #0
 80027ce:	d1b0      	bne.n	8002732 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}

080027da <LL_SPI_IsEnabled>:
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d101      	bne.n	80027f2 <LL_SPI_IsEnabled+0x18>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <LL_SPI_IsEnabled+0x1a>
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b002      	add	sp, #8
 80027fa:	bd80      	pop	{r7, pc}

080027fc <LL_SPI_SetCRCPolynomial>:
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	001a      	movs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002822:	230f      	movs	r3, #15
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff ffd4 	bl	80027da <LL_SPI_IsEnabled>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d13c      	bne.n	80028b0 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <LL_SPI_Init+0xa8>)
 800283c:	401a      	ands	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4319      	orrs	r1, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4319      	orrs	r1, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4319      	orrs	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4319      	orrs	r1, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	4319      	orrs	r1, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4319      	orrs	r1, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4319      	orrs	r1, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	430b      	orrs	r3, r1
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2204      	movs	r2, #4
 800287e:	4393      	bics	r3, r2
 8002880:	001a      	movs	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	429a      	cmp	r2, r3
 8002898:	d106      	bne.n	80028a8 <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0011      	movs	r1, r2
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7ff ffaa 	bl	80027fc <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80028a8:	230f      	movs	r3, #15
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80028b0:	230f      	movs	r3, #15
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	ffff0040 	.word	0xffff0040

080028c4 <__libc_init_array>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	2600      	movs	r6, #0
 80028c8:	4d0c      	ldr	r5, [pc, #48]	; (80028fc <__libc_init_array+0x38>)
 80028ca:	4c0d      	ldr	r4, [pc, #52]	; (8002900 <__libc_init_array+0x3c>)
 80028cc:	1b64      	subs	r4, r4, r5
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	42a6      	cmp	r6, r4
 80028d2:	d109      	bne.n	80028e8 <__libc_init_array+0x24>
 80028d4:	2600      	movs	r6, #0
 80028d6:	f000 f821 	bl	800291c <_init>
 80028da:	4d0a      	ldr	r5, [pc, #40]	; (8002904 <__libc_init_array+0x40>)
 80028dc:	4c0a      	ldr	r4, [pc, #40]	; (8002908 <__libc_init_array+0x44>)
 80028de:	1b64      	subs	r4, r4, r5
 80028e0:	10a4      	asrs	r4, r4, #2
 80028e2:	42a6      	cmp	r6, r4
 80028e4:	d105      	bne.n	80028f2 <__libc_init_array+0x2e>
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
 80028e8:	00b3      	lsls	r3, r6, #2
 80028ea:	58eb      	ldr	r3, [r5, r3]
 80028ec:	4798      	blx	r3
 80028ee:	3601      	adds	r6, #1
 80028f0:	e7ee      	b.n	80028d0 <__libc_init_array+0xc>
 80028f2:	00b3      	lsls	r3, r6, #2
 80028f4:	58eb      	ldr	r3, [r5, r3]
 80028f6:	4798      	blx	r3
 80028f8:	3601      	adds	r6, #1
 80028fa:	e7f2      	b.n	80028e2 <__libc_init_array+0x1e>
 80028fc:	08002960 	.word	0x08002960
 8002900:	08002960 	.word	0x08002960
 8002904:	08002960 	.word	0x08002960
 8002908:	08002964 	.word	0x08002964

0800290c <memset>:
 800290c:	0003      	movs	r3, r0
 800290e:	1882      	adds	r2, r0, r2
 8002910:	4293      	cmp	r3, r2
 8002912:	d100      	bne.n	8002916 <memset+0xa>
 8002914:	4770      	bx	lr
 8002916:	7019      	strb	r1, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	e7f9      	b.n	8002910 <memset+0x4>

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
